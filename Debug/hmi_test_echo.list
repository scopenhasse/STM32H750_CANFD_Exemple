
hmi_test_echo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c2c  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08003ec4  08003ec4  00013ec4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003f30  08003f30  00013f30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003f34  08003f34  00013f34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  24000000  08003f38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000118  24000010  08003f48  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24000128  08003f48  00020128  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000d827  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000019e7  00000000  00000000  0002d865  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000a78  00000000  00000000  0002f250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 000009a0  00000000  00000000  0002fcc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003cf15  00000000  00000000  00030668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000df8b  00000000  00000000  0006d57d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00192651  00000000  00000000  0007b508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  0020db59  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002ae0  00000000  00000000  0020dbac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08003eac 	.word	0x08003eac

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08003eac 	.word	0x08003eac

080002d8 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80002dc:	4b2e      	ldr	r3, [pc, #184]	; (8000398 <MX_FDCAN1_Init+0xc0>)
 80002de:	4a2f      	ldr	r2, [pc, #188]	; (800039c <MX_FDCAN1_Init+0xc4>)
 80002e0:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80002e2:	4b2d      	ldr	r3, [pc, #180]	; (8000398 <MX_FDCAN1_Init+0xc0>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80002e8:	4b2b      	ldr	r3, [pc, #172]	; (8000398 <MX_FDCAN1_Init+0xc0>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 80002ee:	4b2a      	ldr	r3, [pc, #168]	; (8000398 <MX_FDCAN1_Init+0xc0>)
 80002f0:	2201      	movs	r2, #1
 80002f2:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80002f4:	4b28      	ldr	r3, [pc, #160]	; (8000398 <MX_FDCAN1_Init+0xc0>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80002fa:	4b27      	ldr	r3, [pc, #156]	; (8000398 <MX_FDCAN1_Init+0xc0>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 6;
 8000300:	4b25      	ldr	r3, [pc, #148]	; (8000398 <MX_FDCAN1_Init+0xc0>)
 8000302:	2206      	movs	r2, #6
 8000304:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 12;
 8000306:	4b24      	ldr	r3, [pc, #144]	; (8000398 <MX_FDCAN1_Init+0xc0>)
 8000308:	220c      	movs	r2, #12
 800030a:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 12;
 800030c:	4b22      	ldr	r3, [pc, #136]	; (8000398 <MX_FDCAN1_Init+0xc0>)
 800030e:	220c      	movs	r2, #12
 8000310:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 7;
 8000312:	4b21      	ldr	r3, [pc, #132]	; (8000398 <MX_FDCAN1_Init+0xc0>)
 8000314:	2207      	movs	r2, #7
 8000316:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000318:	4b1f      	ldr	r3, [pc, #124]	; (8000398 <MX_FDCAN1_Init+0xc0>)
 800031a:	2201      	movs	r2, #1
 800031c:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 800031e:	4b1e      	ldr	r3, [pc, #120]	; (8000398 <MX_FDCAN1_Init+0xc0>)
 8000320:	2201      	movs	r2, #1
 8000322:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000324:	4b1c      	ldr	r3, [pc, #112]	; (8000398 <MX_FDCAN1_Init+0xc0>)
 8000326:	2201      	movs	r2, #1
 8000328:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 800032a:	4b1b      	ldr	r3, [pc, #108]	; (8000398 <MX_FDCAN1_Init+0xc0>)
 800032c:	2201      	movs	r2, #1
 800032e:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000330:	4b19      	ldr	r3, [pc, #100]	; (8000398 <MX_FDCAN1_Init+0xc0>)
 8000332:	2200      	movs	r2, #0
 8000334:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8000336:	4b18      	ldr	r3, [pc, #96]	; (8000398 <MX_FDCAN1_Init+0xc0>)
 8000338:	2200      	movs	r2, #0
 800033a:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 800033c:	4b16      	ldr	r3, [pc, #88]	; (8000398 <MX_FDCAN1_Init+0xc0>)
 800033e:	2200      	movs	r2, #0
 8000340:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 10;
 8000342:	4b15      	ldr	r3, [pc, #84]	; (8000398 <MX_FDCAN1_Init+0xc0>)
 8000344:	220a      	movs	r2, #10
 8000346:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000348:	4b13      	ldr	r3, [pc, #76]	; (8000398 <MX_FDCAN1_Init+0xc0>)
 800034a:	2204      	movs	r2, #4
 800034c:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 800034e:	4b12      	ldr	r3, [pc, #72]	; (8000398 <MX_FDCAN1_Init+0xc0>)
 8000350:	2200      	movs	r2, #0
 8000352:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000354:	4b10      	ldr	r3, [pc, #64]	; (8000398 <MX_FDCAN1_Init+0xc0>)
 8000356:	2204      	movs	r2, #4
 8000358:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 800035a:	4b0f      	ldr	r3, [pc, #60]	; (8000398 <MX_FDCAN1_Init+0xc0>)
 800035c:	2200      	movs	r2, #0
 800035e:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000360:	4b0d      	ldr	r3, [pc, #52]	; (8000398 <MX_FDCAN1_Init+0xc0>)
 8000362:	2204      	movs	r2, #4
 8000364:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000366:	4b0c      	ldr	r3, [pc, #48]	; (8000398 <MX_FDCAN1_Init+0xc0>)
 8000368:	2200      	movs	r2, #0
 800036a:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 10;
 800036c:	4b0a      	ldr	r3, [pc, #40]	; (8000398 <MX_FDCAN1_Init+0xc0>)
 800036e:	220a      	movs	r2, #10
 8000370:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 10;
 8000372:	4b09      	ldr	r3, [pc, #36]	; (8000398 <MX_FDCAN1_Init+0xc0>)
 8000374:	220a      	movs	r2, #10
 8000376:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000378:	4b07      	ldr	r3, [pc, #28]	; (8000398 <MX_FDCAN1_Init+0xc0>)
 800037a:	2200      	movs	r2, #0
 800037c:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 800037e:	4b06      	ldr	r3, [pc, #24]	; (8000398 <MX_FDCAN1_Init+0xc0>)
 8000380:	2204      	movs	r2, #4
 8000382:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000384:	4804      	ldr	r0, [pc, #16]	; (8000398 <MX_FDCAN1_Init+0xc0>)
 8000386:	f000 fd75 	bl	8000e74 <HAL_FDCAN_Init>
 800038a:	4603      	mov	r3, r0
 800038c:	2b00      	cmp	r3, #0
 800038e:	d001      	beq.n	8000394 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000390:	f000 faf2 	bl	8000978 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000394:	bf00      	nop
 8000396:	bd80      	pop	{r7, pc}
 8000398:	2400002c 	.word	0x2400002c
 800039c:	4000a000 	.word	0x4000a000

080003a0 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b0b8      	sub	sp, #224	; 0xe0
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003a8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80003ac:	2200      	movs	r2, #0
 80003ae:	601a      	str	r2, [r3, #0]
 80003b0:	605a      	str	r2, [r3, #4]
 80003b2:	609a      	str	r2, [r3, #8]
 80003b4:	60da      	str	r2, [r3, #12]
 80003b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80003b8:	f107 0310 	add.w	r3, r7, #16
 80003bc:	22bc      	movs	r2, #188	; 0xbc
 80003be:	2100      	movs	r1, #0
 80003c0:	4618      	mov	r0, r3
 80003c2:	f003 fd6b 	bl	8003e9c <memset>
  if(fdcanHandle->Instance==FDCAN1)
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	4a25      	ldr	r2, [pc, #148]	; (8000460 <HAL_FDCAN_MspInit+0xc0>)
 80003cc:	4293      	cmp	r3, r2
 80003ce:	d143      	bne.n	8000458 <HAL_FDCAN_MspInit+0xb8>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80003d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80003d4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 80003d6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80003da:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80003dc:	f107 0310 	add.w	r3, r7, #16
 80003e0:	4618      	mov	r0, r3
 80003e2:	f002 fc7f 	bl	8002ce4 <HAL_RCCEx_PeriphCLKConfig>
 80003e6:	4603      	mov	r3, r0
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d001      	beq.n	80003f0 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80003ec:	f000 fac4 	bl	8000978 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80003f0:	4b1c      	ldr	r3, [pc, #112]	; (8000464 <HAL_FDCAN_MspInit+0xc4>)
 80003f2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80003f6:	4a1b      	ldr	r2, [pc, #108]	; (8000464 <HAL_FDCAN_MspInit+0xc4>)
 80003f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003fc:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8000400:	4b18      	ldr	r3, [pc, #96]	; (8000464 <HAL_FDCAN_MspInit+0xc4>)
 8000402:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800040a:	60fb      	str	r3, [r7, #12]
 800040c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOH_CLK_ENABLE();
 800040e:	4b15      	ldr	r3, [pc, #84]	; (8000464 <HAL_FDCAN_MspInit+0xc4>)
 8000410:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000414:	4a13      	ldr	r2, [pc, #76]	; (8000464 <HAL_FDCAN_MspInit+0xc4>)
 8000416:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800041a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800041e:	4b11      	ldr	r3, [pc, #68]	; (8000464 <HAL_FDCAN_MspInit+0xc4>)
 8000420:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000424:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000428:	60bb      	str	r3, [r7, #8]
 800042a:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PH14     ------> FDCAN1_RX
    PH13     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = FDCAN1_RX_Pin|FDCAN1_TX_Pin;
 800042c:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000430:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000434:	2302      	movs	r3, #2
 8000436:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800043a:	2300      	movs	r3, #0
 800043c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000440:	2300      	movs	r3, #0
 8000442:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000446:	2309      	movs	r3, #9
 8000448:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800044c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000450:	4619      	mov	r1, r3
 8000452:	4805      	ldr	r0, [pc, #20]	; (8000468 <HAL_FDCAN_MspInit+0xc8>)
 8000454:	f001 fae4 	bl	8001a20 <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8000458:	bf00      	nop
 800045a:	37e0      	adds	r7, #224	; 0xe0
 800045c:	46bd      	mov	sp, r7
 800045e:	bd80      	pop	{r7, pc}
 8000460:	4000a000 	.word	0x4000a000
 8000464:	58024400 	.word	0x58024400
 8000468:	58021c00 	.word	0x58021c00

0800046c <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PA6   ------> S_TIM13_CH1
*/
void MX_GPIO_Init(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b090      	sub	sp, #64	; 0x40
 8000470:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000472:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000476:	2200      	movs	r2, #0
 8000478:	601a      	str	r2, [r3, #0]
 800047a:	605a      	str	r2, [r3, #4]
 800047c:	609a      	str	r2, [r3, #8]
 800047e:	60da      	str	r2, [r3, #12]
 8000480:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000482:	4bba      	ldr	r3, [pc, #744]	; (800076c <MX_GPIO_Init+0x300>)
 8000484:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000488:	4ab8      	ldr	r2, [pc, #736]	; (800076c <MX_GPIO_Init+0x300>)
 800048a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800048e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000492:	4bb6      	ldr	r3, [pc, #728]	; (800076c <MX_GPIO_Init+0x300>)
 8000494:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000498:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800049c:	62bb      	str	r3, [r7, #40]	; 0x28
 800049e:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004a0:	4bb2      	ldr	r3, [pc, #712]	; (800076c <MX_GPIO_Init+0x300>)
 80004a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004a6:	4ab1      	ldr	r2, [pc, #708]	; (800076c <MX_GPIO_Init+0x300>)
 80004a8:	f043 0302 	orr.w	r3, r3, #2
 80004ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80004b0:	4bae      	ldr	r3, [pc, #696]	; (800076c <MX_GPIO_Init+0x300>)
 80004b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004b6:	f003 0302 	and.w	r3, r3, #2
 80004ba:	627b      	str	r3, [r7, #36]	; 0x24
 80004bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80004be:	4bab      	ldr	r3, [pc, #684]	; (800076c <MX_GPIO_Init+0x300>)
 80004c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004c4:	4aa9      	ldr	r2, [pc, #676]	; (800076c <MX_GPIO_Init+0x300>)
 80004c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80004ce:	4ba7      	ldr	r3, [pc, #668]	; (800076c <MX_GPIO_Init+0x300>)
 80004d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80004d8:	623b      	str	r3, [r7, #32]
 80004da:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80004dc:	4ba3      	ldr	r3, [pc, #652]	; (800076c <MX_GPIO_Init+0x300>)
 80004de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004e2:	4aa2      	ldr	r2, [pc, #648]	; (800076c <MX_GPIO_Init+0x300>)
 80004e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80004e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80004ec:	4b9f      	ldr	r3, [pc, #636]	; (800076c <MX_GPIO_Init+0x300>)
 80004ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80004f6:	61fb      	str	r3, [r7, #28]
 80004f8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004fa:	4b9c      	ldr	r3, [pc, #624]	; (800076c <MX_GPIO_Init+0x300>)
 80004fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000500:	4a9a      	ldr	r2, [pc, #616]	; (800076c <MX_GPIO_Init+0x300>)
 8000502:	f043 0304 	orr.w	r3, r3, #4
 8000506:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800050a:	4b98      	ldr	r3, [pc, #608]	; (800076c <MX_GPIO_Init+0x300>)
 800050c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000510:	f003 0304 	and.w	r3, r3, #4
 8000514:	61bb      	str	r3, [r7, #24]
 8000516:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000518:	4b94      	ldr	r3, [pc, #592]	; (800076c <MX_GPIO_Init+0x300>)
 800051a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800051e:	4a93      	ldr	r2, [pc, #588]	; (800076c <MX_GPIO_Init+0x300>)
 8000520:	f043 0310 	orr.w	r3, r3, #16
 8000524:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000528:	4b90      	ldr	r3, [pc, #576]	; (800076c <MX_GPIO_Init+0x300>)
 800052a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800052e:	f003 0310 	and.w	r3, r3, #16
 8000532:	617b      	str	r3, [r7, #20]
 8000534:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000536:	4b8d      	ldr	r3, [pc, #564]	; (800076c <MX_GPIO_Init+0x300>)
 8000538:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800053c:	4a8b      	ldr	r2, [pc, #556]	; (800076c <MX_GPIO_Init+0x300>)
 800053e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000542:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000546:	4b89      	ldr	r3, [pc, #548]	; (800076c <MX_GPIO_Init+0x300>)
 8000548:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800054c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000550:	613b      	str	r3, [r7, #16]
 8000552:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000554:	4b85      	ldr	r3, [pc, #532]	; (800076c <MX_GPIO_Init+0x300>)
 8000556:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800055a:	4a84      	ldr	r2, [pc, #528]	; (800076c <MX_GPIO_Init+0x300>)
 800055c:	f043 0308 	orr.w	r3, r3, #8
 8000560:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000564:	4b81      	ldr	r3, [pc, #516]	; (800076c <MX_GPIO_Init+0x300>)
 8000566:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800056a:	f003 0308 	and.w	r3, r3, #8
 800056e:	60fb      	str	r3, [r7, #12]
 8000570:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000572:	4b7e      	ldr	r3, [pc, #504]	; (800076c <MX_GPIO_Init+0x300>)
 8000574:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000578:	4a7c      	ldr	r2, [pc, #496]	; (800076c <MX_GPIO_Init+0x300>)
 800057a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800057e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000582:	4b7a      	ldr	r3, [pc, #488]	; (800076c <MX_GPIO_Init+0x300>)
 8000584:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000588:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800058c:	60bb      	str	r3, [r7, #8]
 800058e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000590:	4b76      	ldr	r3, [pc, #472]	; (800076c <MX_GPIO_Init+0x300>)
 8000592:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000596:	4a75      	ldr	r2, [pc, #468]	; (800076c <MX_GPIO_Init+0x300>)
 8000598:	f043 0301 	orr.w	r3, r3, #1
 800059c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80005a0:	4b72      	ldr	r3, [pc, #456]	; (800076c <MX_GPIO_Init+0x300>)
 80005a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005a6:	f003 0301 	and.w	r3, r3, #1
 80005aa:	607b      	str	r3, [r7, #4]
 80005ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005ae:	4b6f      	ldr	r3, [pc, #444]	; (800076c <MX_GPIO_Init+0x300>)
 80005b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005b4:	4a6d      	ldr	r2, [pc, #436]	; (800076c <MX_GPIO_Init+0x300>)
 80005b6:	f043 0320 	orr.w	r3, r3, #32
 80005ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80005be:	4b6b      	ldr	r3, [pc, #428]	; (800076c <MX_GPIO_Init+0x300>)
 80005c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005c4:	f003 0320 	and.w	r3, r3, #32
 80005c8:	603b      	str	r3, [r7, #0]
 80005ca:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005cc:	2200      	movs	r2, #0
 80005ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005d2:	4867      	ldr	r0, [pc, #412]	; (8000770 <MX_GPIO_Init+0x304>)
 80005d4:	f001 fbd4 	bl	8001d80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 80005d8:	2200      	movs	r2, #0
 80005da:	2104      	movs	r1, #4
 80005dc:	4865      	ldr	r0, [pc, #404]	; (8000774 <MX_GPIO_Init+0x308>)
 80005de:	f001 fbcf 	bl	8001d80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 80005e2:	2200      	movs	r2, #0
 80005e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005e8:	4863      	ldr	r0, [pc, #396]	; (8000778 <MX_GPIO_Init+0x30c>)
 80005ea:	f001 fbc9 	bl	8001d80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PH15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80005ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80005f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005f4:	2302      	movs	r3, #2
 80005f6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f8:	2300      	movs	r3, #0
 80005fa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005fc:	2300      	movs	r3, #0
 80005fe:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8000600:	2303      	movs	r3, #3
 8000602:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000604:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000608:	4619      	mov	r1, r3
 800060a:	485c      	ldr	r0, [pc, #368]	; (800077c <MX_GPIO_Init+0x310>)
 800060c:	f001 fa08 	bl	8001a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_DISPD7_Pin;
 8000610:	2380      	movs	r3, #128	; 0x80
 8000612:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000614:	2300      	movs	r3, #0
 8000616:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000618:	2300      	movs	r3, #0
 800061a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_DISPD7_GPIO_Port, &GPIO_InitStruct);
 800061c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000620:	4619      	mov	r1, r3
 8000622:	4857      	ldr	r0, [pc, #348]	; (8000780 <MX_GPIO_Init+0x314>)
 8000624:	f001 f9fc 	bl	8001a20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE5 PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
 8000628:	2330      	movs	r3, #48	; 0x30
 800062a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800062c:	2302      	movs	r3, #2
 800062e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000630:	2300      	movs	r3, #0
 8000632:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000634:	2300      	movs	r3, #0
 8000636:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI4;
 8000638:	230a      	movs	r3, #10
 800063a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800063c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000640:	4619      	mov	r1, r3
 8000642:	4850      	ldr	r0, [pc, #320]	; (8000784 <MX_GPIO_Init+0x318>)
 8000644:	f001 f9ec 	bl	8001a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS2_ID_Pin;
 8000648:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800064c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800064e:	2300      	movs	r3, #0
 8000650:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000652:	2300      	movs	r3, #0
 8000654:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_OTG_FS2_ID_GPIO_Port, &GPIO_InitStruct);
 8000656:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800065a:	4619      	mov	r1, r3
 800065c:	484a      	ldr	r0, [pc, #296]	; (8000788 <MX_GPIO_Init+0x31c>)
 800065e:	f001 f9df 	bl	8001a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000662:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000666:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000668:	2300      	movs	r3, #0
 800066a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066c:	2300      	movs	r3, #0
 800066e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000670:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000674:	4619      	mov	r1, r3
 8000676:	4845      	ldr	r0, [pc, #276]	; (800078c <MX_GPIO_Init+0x320>)
 8000678:	f001 f9d2 	bl	8001a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800067c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000680:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000682:	2302      	movs	r3, #2
 8000684:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000686:	2300      	movs	r3, #0
 8000688:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800068a:	2300      	movs	r3, #0
 800068c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800068e:	2301      	movs	r3, #1
 8000690:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000692:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000696:	4619      	mov	r1, r3
 8000698:	483b      	ldr	r0, [pc, #236]	; (8000788 <MX_GPIO_Init+0x31c>)
 800069a:	f001 f9c1 	bl	8001a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800069e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a4:	2301      	movs	r3, #1
 80006a6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a8:	2300      	movs	r3, #0
 80006aa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ac:	2300      	movs	r3, #0
 80006ae:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80006b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80006b4:	4619      	mov	r1, r3
 80006b6:	482e      	ldr	r0, [pc, #184]	; (8000770 <MX_GPIO_Init+0x304>)
 80006b8:	f001 f9b2 	bl	8001a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 80006bc:	2304      	movs	r3, #4
 80006be:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006c0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80006c4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c6:	2300      	movs	r3, #0
 80006c8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80006ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80006ce:	4619      	mov	r1, r3
 80006d0:	482f      	ldr	r0, [pc, #188]	; (8000790 <MX_GPIO_Init+0x324>)
 80006d2:	f001 f9a5 	bl	8001a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 80006d6:	2301      	movs	r3, #1
 80006d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006da:	2300      	movs	r3, #0
 80006dc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006de:	2300      	movs	r3, #0
 80006e0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 80006e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80006e6:	4619      	mov	r1, r3
 80006e8:	482a      	ldr	r0, [pc, #168]	; (8000794 <MX_GPIO_Init+0x328>)
 80006ea:	f001 f999 	bl	8001a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS2_OverCurrent_Pin;
 80006ee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80006f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006f4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80006f8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fa:	2300      	movs	r3, #0
 80006fc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS2_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80006fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000702:	4619      	mov	r1, r3
 8000704:	481d      	ldr	r0, [pc, #116]	; (800077c <MX_GPIO_Init+0x310>)
 8000706:	f001 f98b 	bl	8001a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800070a:	2340      	movs	r3, #64	; 0x40
 800070c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800070e:	2302      	movs	r3, #2
 8000710:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000712:	2300      	movs	r3, #0
 8000714:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000716:	2300      	movs	r3, #0
 8000718:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 800071a:	2309      	movs	r3, #9
 800071c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800071e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000722:	4619      	mov	r1, r3
 8000724:	4818      	ldr	r0, [pc, #96]	; (8000788 <MX_GPIO_Init+0x31c>)
 8000726:	f001 f97b 	bl	8001a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD1_Pin;
 800072a:	2304      	movs	r3, #4
 800072c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800072e:	2301      	movs	r3, #1
 8000730:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000732:	2300      	movs	r3, #0
 8000734:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000736:	2300      	movs	r3, #0
 8000738:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 800073a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800073e:	4619      	mov	r1, r3
 8000740:	480c      	ldr	r0, [pc, #48]	; (8000774 <MX_GPIO_Init+0x308>)
 8000742:	f001 f96d 	bl	8001a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_RST_Pin;
 8000746:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800074a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800074c:	2301      	movs	r3, #1
 800074e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000750:	2300      	movs	r3, #0
 8000752:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000754:	2300      	movs	r3, #0
 8000756:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 8000758:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800075c:	4619      	mov	r1, r3
 800075e:	4806      	ldr	r0, [pc, #24]	; (8000778 <MX_GPIO_Init+0x30c>)
 8000760:	f001 f95e 	bl	8001a20 <HAL_GPIO_Init>

}
 8000764:	bf00      	nop
 8000766:	3740      	adds	r7, #64	; 0x40
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	58024400 	.word	0x58024400
 8000770:	58022000 	.word	0x58022000
 8000774:	58022400 	.word	0x58022400
 8000778:	58020400 	.word	0x58020400
 800077c:	58021c00 	.word	0x58021c00
 8000780:	58020c00 	.word	0x58020c00
 8000784:	58021000 	.word	0x58021000
 8000788:	58020000 	.word	0x58020000
 800078c:	58020800 	.word	0x58020800
 8000790:	58021800 	.word	0x58021800
 8000794:	58022800 	.word	0x58022800

08000798 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800079c:	f000 f9e8 	bl	8000b70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007a0:	f000 f836 	bl	8000810 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80007a4:	f000 f8bc 	bl	8000920 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007a8:	f7ff fe60 	bl	800046c <MX_GPIO_Init>
  MX_FDCAN1_Init();
 80007ac:	f7ff fd94 	bl	80002d8 <MX_FDCAN1_Init>
//  if (HAL_FDCAN_Config(&hfdcan1, &sFilterConfig) != HAL_OK)
//  {
//    /* Filter configuration Error */
//    Error_Handler();
//  }
  if(HAL_FDCAN_Start(&hfdcan1)!= HAL_OK)
 80007b0:	4813      	ldr	r0, [pc, #76]	; (8000800 <main+0x68>)
 80007b2:	f000 fd3d 	bl	8001230 <HAL_FDCAN_Start>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <main+0x28>
  {
   Error_Handler();
 80007bc:	f000 f8dc 	bl	8000978 <Error_Handler>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
        if(HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader1, RxData1) == HAL_OK)
 80007c0:	4b10      	ldr	r3, [pc, #64]	; (8000804 <main+0x6c>)
 80007c2:	4a11      	ldr	r2, [pc, #68]	; (8000808 <main+0x70>)
 80007c4:	2140      	movs	r1, #64	; 0x40
 80007c6:	480e      	ldr	r0, [pc, #56]	; (8000800 <main+0x68>)
 80007c8:	f000 fdb8 	bl	800133c <HAL_FDCAN_GetRxMessage>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d1f6      	bne.n	80007c0 <main+0x28>
        {
            TxHeader1.IdType = RxHeader1.IdType;
 80007d2:	4b0d      	ldr	r3, [pc, #52]	; (8000808 <main+0x70>)
 80007d4:	685b      	ldr	r3, [r3, #4]
 80007d6:	4a0d      	ldr	r2, [pc, #52]	; (800080c <main+0x74>)
 80007d8:	6053      	str	r3, [r2, #4]
            TxHeader1.Identifier = RxHeader1.Identifier + 1;
 80007da:	4b0b      	ldr	r3, [pc, #44]	; (8000808 <main+0x70>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	3301      	adds	r3, #1
 80007e0:	4a0a      	ldr	r2, [pc, #40]	; (800080c <main+0x74>)
 80007e2:	6013      	str	r3, [r2, #0]

            TxHeader1.DataLength = RxHeader1.DataLength;
 80007e4:	4b08      	ldr	r3, [pc, #32]	; (8000808 <main+0x70>)
 80007e6:	68db      	ldr	r3, [r3, #12]
 80007e8:	4a08      	ldr	r2, [pc, #32]	; (800080c <main+0x74>)
 80007ea:	60d3      	str	r3, [r2, #12]
            TxHeader1.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80007ec:	4b07      	ldr	r3, [pc, #28]	; (800080c <main+0x74>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	611a      	str	r2, [r3, #16]

            HAL_FDCAN_AddMessageToTxFifoQ (&hfdcan1, &TxHeader1, RxData1);
 80007f2:	4a04      	ldr	r2, [pc, #16]	; (8000804 <main+0x6c>)
 80007f4:	4905      	ldr	r1, [pc, #20]	; (800080c <main+0x74>)
 80007f6:	4802      	ldr	r0, [pc, #8]	; (8000800 <main+0x68>)
 80007f8:	f000 fd45 	bl	8001286 <HAL_FDCAN_AddMessageToTxFifoQ>
        if(HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader1, RxData1) == HAL_OK)
 80007fc:	e7e0      	b.n	80007c0 <main+0x28>
 80007fe:	bf00      	nop
 8000800:	2400002c 	.word	0x2400002c
 8000804:	24000118 	.word	0x24000118
 8000808:	240000f0 	.word	0x240000f0
 800080c:	240000cc 	.word	0x240000cc

08000810 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b09c      	sub	sp, #112	; 0x70
 8000814:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000816:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800081a:	224c      	movs	r2, #76	; 0x4c
 800081c:	2100      	movs	r1, #0
 800081e:	4618      	mov	r0, r3
 8000820:	f003 fb3c 	bl	8003e9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000824:	1d3b      	adds	r3, r7, #4
 8000826:	2220      	movs	r2, #32
 8000828:	2100      	movs	r1, #0
 800082a:	4618      	mov	r0, r3
 800082c:	f003 fb36 	bl	8003e9c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000830:	2002      	movs	r0, #2
 8000832:	f001 fabf 	bl	8001db4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000836:	2300      	movs	r3, #0
 8000838:	603b      	str	r3, [r7, #0]
 800083a:	4b36      	ldr	r3, [pc, #216]	; (8000914 <SystemClock_Config+0x104>)
 800083c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800083e:	4a35      	ldr	r2, [pc, #212]	; (8000914 <SystemClock_Config+0x104>)
 8000840:	f023 0301 	bic.w	r3, r3, #1
 8000844:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000846:	4b33      	ldr	r3, [pc, #204]	; (8000914 <SystemClock_Config+0x104>)
 8000848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800084a:	f003 0301 	and.w	r3, r3, #1
 800084e:	603b      	str	r3, [r7, #0]
 8000850:	4b31      	ldr	r3, [pc, #196]	; (8000918 <SystemClock_Config+0x108>)
 8000852:	699b      	ldr	r3, [r3, #24]
 8000854:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000858:	4a2f      	ldr	r2, [pc, #188]	; (8000918 <SystemClock_Config+0x108>)
 800085a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800085e:	6193      	str	r3, [r2, #24]
 8000860:	4b2d      	ldr	r3, [pc, #180]	; (8000918 <SystemClock_Config+0x108>)
 8000862:	699b      	ldr	r3, [r3, #24]
 8000864:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000868:	603b      	str	r3, [r7, #0]
 800086a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800086c:	bf00      	nop
 800086e:	4b2a      	ldr	r3, [pc, #168]	; (8000918 <SystemClock_Config+0x108>)
 8000870:	699b      	ldr	r3, [r3, #24]
 8000872:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000876:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800087a:	d1f8      	bne.n	800086e <SystemClock_Config+0x5e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800087c:	4b27      	ldr	r3, [pc, #156]	; (800091c <SystemClock_Config+0x10c>)
 800087e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000880:	f023 0303 	bic.w	r3, r3, #3
 8000884:	4a25      	ldr	r2, [pc, #148]	; (800091c <SystemClock_Config+0x10c>)
 8000886:	f043 0302 	orr.w	r3, r3, #2
 800088a:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800088c:	2309      	movs	r3, #9
 800088e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000890:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000894:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000896:	2301      	movs	r3, #1
 8000898:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800089a:	2302      	movs	r3, #2
 800089c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800089e:	2302      	movs	r3, #2
 80008a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 80008a2:	2305      	movs	r3, #5
 80008a4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 96;
 80008a6:	2360      	movs	r3, #96	; 0x60
 80008a8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80008aa:	2302      	movs	r3, #2
 80008ac:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80008ae:	2308      	movs	r3, #8
 80008b0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008b2:	2302      	movs	r3, #2
 80008b4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80008b6:	2308      	movs	r3, #8
 80008b8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80008ba:	2300      	movs	r3, #0
 80008bc:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80008be:	2300      	movs	r3, #0
 80008c0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008c6:	4618      	mov	r0, r3
 80008c8:	f001 faae 	bl	8001e28 <HAL_RCC_OscConfig>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80008d2:	f000 f851 	bl	8000978 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008d6:	233f      	movs	r3, #63	; 0x3f
 80008d8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008da:	2303      	movs	r3, #3
 80008dc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008de:	2300      	movs	r3, #0
 80008e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80008e2:	2308      	movs	r3, #8
 80008e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80008e6:	2300      	movs	r3, #0
 80008e8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80008ea:	2340      	movs	r3, #64	; 0x40
 80008ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80008ee:	2300      	movs	r3, #0
 80008f0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80008f2:	2300      	movs	r3, #0
 80008f4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008f6:	1d3b      	adds	r3, r7, #4
 80008f8:	2102      	movs	r1, #2
 80008fa:	4618      	mov	r0, r3
 80008fc:	f001 fec2 	bl	8002684 <HAL_RCC_ClockConfig>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <SystemClock_Config+0xfa>
  {
    Error_Handler();
 8000906:	f000 f837 	bl	8000978 <Error_Handler>
  }
}
 800090a:	bf00      	nop
 800090c:	3770      	adds	r7, #112	; 0x70
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	58000400 	.word	0x58000400
 8000918:	58024800 	.word	0x58024800
 800091c:	58024400 	.word	0x58024400

08000920 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b0b0      	sub	sp, #192	; 0xc0
 8000924:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000926:	1d3b      	adds	r3, r7, #4
 8000928:	22bc      	movs	r2, #188	; 0xbc
 800092a:	2100      	movs	r1, #0
 800092c:	4618      	mov	r0, r3
 800092e:	f003 fab5 	bl	8003e9c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000932:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000936:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8000938:	2302      	movs	r3, #2
 800093a:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 800093c:	230c      	movs	r3, #12
 800093e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 3;
 8000940:	2303      	movs	r3, #3
 8000942:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000944:	2302      	movs	r3, #2
 8000946:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000948:	2302      	movs	r3, #2
 800094a:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800094c:	23c0      	movs	r3, #192	; 0xc0
 800094e:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000950:	2320      	movs	r3, #32
 8000952:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000954:	2300      	movs	r3, #0
 8000956:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000958:	2300      	movs	r3, #0
 800095a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800095e:	1d3b      	adds	r3, r7, #4
 8000960:	4618      	mov	r0, r3
 8000962:	f002 f9bf 	bl	8002ce4 <HAL_RCCEx_PeriphCLKConfig>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <PeriphCommonClock_Config+0x50>
  {
    Error_Handler();
 800096c:	f000 f804 	bl	8000978 <Error_Handler>
  }
}
 8000970:	bf00      	nop
 8000972:	37c0      	adds	r7, #192	; 0xc0
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}

08000978 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800097c:	b672      	cpsid	i
}
 800097e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000980:	e7fe      	b.n	8000980 <Error_Handler+0x8>
	...

08000984 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000984:	b480      	push	{r7}
 8000986:	b083      	sub	sp, #12
 8000988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800098a:	4b0a      	ldr	r3, [pc, #40]	; (80009b4 <HAL_MspInit+0x30>)
 800098c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000990:	4a08      	ldr	r2, [pc, #32]	; (80009b4 <HAL_MspInit+0x30>)
 8000992:	f043 0302 	orr.w	r3, r3, #2
 8000996:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800099a:	4b06      	ldr	r3, [pc, #24]	; (80009b4 <HAL_MspInit+0x30>)
 800099c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80009a0:	f003 0302 	and.w	r3, r3, #2
 80009a4:	607b      	str	r3, [r7, #4]
 80009a6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009a8:	bf00      	nop
 80009aa:	370c      	adds	r7, #12
 80009ac:	46bd      	mov	sp, r7
 80009ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b2:	4770      	bx	lr
 80009b4:	58024400 	.word	0x58024400

080009b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009bc:	e7fe      	b.n	80009bc <NMI_Handler+0x4>

080009be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009be:	b480      	push	{r7}
 80009c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009c2:	e7fe      	b.n	80009c2 <HardFault_Handler+0x4>

080009c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009c8:	e7fe      	b.n	80009c8 <MemManage_Handler+0x4>

080009ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009ca:	b480      	push	{r7}
 80009cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ce:	e7fe      	b.n	80009ce <BusFault_Handler+0x4>

080009d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009d4:	e7fe      	b.n	80009d4 <UsageFault_Handler+0x4>

080009d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009d6:	b480      	push	{r7}
 80009d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009da:	bf00      	nop
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr

080009e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009e8:	bf00      	nop
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr

080009f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009f2:	b480      	push	{r7}
 80009f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009f6:	bf00      	nop
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr

08000a00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a04:	f000 f926 	bl	8000c54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a08:	bf00      	nop
 8000a0a:	bd80      	pop	{r7, pc}

08000a0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a10:	4b37      	ldr	r3, [pc, #220]	; (8000af0 <SystemInit+0xe4>)
 8000a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a16:	4a36      	ldr	r2, [pc, #216]	; (8000af0 <SystemInit+0xe4>)
 8000a18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a20:	4b34      	ldr	r3, [pc, #208]	; (8000af4 <SystemInit+0xe8>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	f003 030f 	and.w	r3, r3, #15
 8000a28:	2b06      	cmp	r3, #6
 8000a2a:	d807      	bhi.n	8000a3c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000a2c:	4b31      	ldr	r3, [pc, #196]	; (8000af4 <SystemInit+0xe8>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	f023 030f 	bic.w	r3, r3, #15
 8000a34:	4a2f      	ldr	r2, [pc, #188]	; (8000af4 <SystemInit+0xe8>)
 8000a36:	f043 0307 	orr.w	r3, r3, #7
 8000a3a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000a3c:	4b2e      	ldr	r3, [pc, #184]	; (8000af8 <SystemInit+0xec>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a2d      	ldr	r2, [pc, #180]	; (8000af8 <SystemInit+0xec>)
 8000a42:	f043 0301 	orr.w	r3, r3, #1
 8000a46:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000a48:	4b2b      	ldr	r3, [pc, #172]	; (8000af8 <SystemInit+0xec>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000a4e:	4b2a      	ldr	r3, [pc, #168]	; (8000af8 <SystemInit+0xec>)
 8000a50:	681a      	ldr	r2, [r3, #0]
 8000a52:	4929      	ldr	r1, [pc, #164]	; (8000af8 <SystemInit+0xec>)
 8000a54:	4b29      	ldr	r3, [pc, #164]	; (8000afc <SystemInit+0xf0>)
 8000a56:	4013      	ands	r3, r2
 8000a58:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a5a:	4b26      	ldr	r3, [pc, #152]	; (8000af4 <SystemInit+0xe8>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	f003 0308 	and.w	r3, r3, #8
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d007      	beq.n	8000a76 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000a66:	4b23      	ldr	r3, [pc, #140]	; (8000af4 <SystemInit+0xe8>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	f023 030f 	bic.w	r3, r3, #15
 8000a6e:	4a21      	ldr	r2, [pc, #132]	; (8000af4 <SystemInit+0xe8>)
 8000a70:	f043 0307 	orr.w	r3, r3, #7
 8000a74:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000a76:	4b20      	ldr	r3, [pc, #128]	; (8000af8 <SystemInit+0xec>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000a7c:	4b1e      	ldr	r3, [pc, #120]	; (8000af8 <SystemInit+0xec>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000a82:	4b1d      	ldr	r3, [pc, #116]	; (8000af8 <SystemInit+0xec>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000a88:	4b1b      	ldr	r3, [pc, #108]	; (8000af8 <SystemInit+0xec>)
 8000a8a:	4a1d      	ldr	r2, [pc, #116]	; (8000b00 <SystemInit+0xf4>)
 8000a8c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000a8e:	4b1a      	ldr	r3, [pc, #104]	; (8000af8 <SystemInit+0xec>)
 8000a90:	4a1c      	ldr	r2, [pc, #112]	; (8000b04 <SystemInit+0xf8>)
 8000a92:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000a94:	4b18      	ldr	r3, [pc, #96]	; (8000af8 <SystemInit+0xec>)
 8000a96:	4a1c      	ldr	r2, [pc, #112]	; (8000b08 <SystemInit+0xfc>)
 8000a98:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000a9a:	4b17      	ldr	r3, [pc, #92]	; (8000af8 <SystemInit+0xec>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000aa0:	4b15      	ldr	r3, [pc, #84]	; (8000af8 <SystemInit+0xec>)
 8000aa2:	4a19      	ldr	r2, [pc, #100]	; (8000b08 <SystemInit+0xfc>)
 8000aa4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000aa6:	4b14      	ldr	r3, [pc, #80]	; (8000af8 <SystemInit+0xec>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000aac:	4b12      	ldr	r3, [pc, #72]	; (8000af8 <SystemInit+0xec>)
 8000aae:	4a16      	ldr	r2, [pc, #88]	; (8000b08 <SystemInit+0xfc>)
 8000ab0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000ab2:	4b11      	ldr	r3, [pc, #68]	; (8000af8 <SystemInit+0xec>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000ab8:	4b0f      	ldr	r3, [pc, #60]	; (8000af8 <SystemInit+0xec>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a0e      	ldr	r2, [pc, #56]	; (8000af8 <SystemInit+0xec>)
 8000abe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ac2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000ac4:	4b0c      	ldr	r3, [pc, #48]	; (8000af8 <SystemInit+0xec>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000aca:	4b10      	ldr	r3, [pc, #64]	; (8000b0c <SystemInit+0x100>)
 8000acc:	681a      	ldr	r2, [r3, #0]
 8000ace:	4b10      	ldr	r3, [pc, #64]	; (8000b10 <SystemInit+0x104>)
 8000ad0:	4013      	ands	r3, r2
 8000ad2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000ad6:	d202      	bcs.n	8000ade <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000ad8:	4b0e      	ldr	r3, [pc, #56]	; (8000b14 <SystemInit+0x108>)
 8000ada:	2201      	movs	r2, #1
 8000adc:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000ade:	4b0e      	ldr	r3, [pc, #56]	; (8000b18 <SystemInit+0x10c>)
 8000ae0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000ae4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000ae6:	bf00      	nop
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr
 8000af0:	e000ed00 	.word	0xe000ed00
 8000af4:	52002000 	.word	0x52002000
 8000af8:	58024400 	.word	0x58024400
 8000afc:	eaf6ed7f 	.word	0xeaf6ed7f
 8000b00:	02020200 	.word	0x02020200
 8000b04:	01ff0000 	.word	0x01ff0000
 8000b08:	01010280 	.word	0x01010280
 8000b0c:	5c001000 	.word	0x5c001000
 8000b10:	ffff0000 	.word	0xffff0000
 8000b14:	51008108 	.word	0x51008108
 8000b18:	52004000 	.word	0x52004000

08000b1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000b1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b54 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b20:	f7ff ff74 	bl	8000a0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b24:	480c      	ldr	r0, [pc, #48]	; (8000b58 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b26:	490d      	ldr	r1, [pc, #52]	; (8000b5c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b28:	4a0d      	ldr	r2, [pc, #52]	; (8000b60 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b2c:	e002      	b.n	8000b34 <LoopCopyDataInit>

08000b2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b32:	3304      	adds	r3, #4

08000b34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b38:	d3f9      	bcc.n	8000b2e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b3a:	4a0a      	ldr	r2, [pc, #40]	; (8000b64 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b3c:	4c0a      	ldr	r4, [pc, #40]	; (8000b68 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b40:	e001      	b.n	8000b46 <LoopFillZerobss>

08000b42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b44:	3204      	adds	r2, #4

08000b46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b48:	d3fb      	bcc.n	8000b42 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b4a:	f003 f975 	bl	8003e38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b4e:	f7ff fe23 	bl	8000798 <main>
  bx  lr
 8000b52:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b54:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000b58:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000b5c:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000b60:	08003f38 	.word	0x08003f38
  ldr r2, =_sbss
 8000b64:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000b68:	24000128 	.word	0x24000128

08000b6c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b6c:	e7fe      	b.n	8000b6c <ADC3_IRQHandler>
	...

08000b70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b76:	2003      	movs	r0, #3
 8000b78:	f000 f94a 	bl	8000e10 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000b7c:	f001 ff38 	bl	80029f0 <HAL_RCC_GetSysClockFreq>
 8000b80:	4602      	mov	r2, r0
 8000b82:	4b15      	ldr	r3, [pc, #84]	; (8000bd8 <HAL_Init+0x68>)
 8000b84:	699b      	ldr	r3, [r3, #24]
 8000b86:	0a1b      	lsrs	r3, r3, #8
 8000b88:	f003 030f 	and.w	r3, r3, #15
 8000b8c:	4913      	ldr	r1, [pc, #76]	; (8000bdc <HAL_Init+0x6c>)
 8000b8e:	5ccb      	ldrb	r3, [r1, r3]
 8000b90:	f003 031f 	and.w	r3, r3, #31
 8000b94:	fa22 f303 	lsr.w	r3, r2, r3
 8000b98:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000b9a:	4b0f      	ldr	r3, [pc, #60]	; (8000bd8 <HAL_Init+0x68>)
 8000b9c:	699b      	ldr	r3, [r3, #24]
 8000b9e:	f003 030f 	and.w	r3, r3, #15
 8000ba2:	4a0e      	ldr	r2, [pc, #56]	; (8000bdc <HAL_Init+0x6c>)
 8000ba4:	5cd3      	ldrb	r3, [r2, r3]
 8000ba6:	f003 031f 	and.w	r3, r3, #31
 8000baa:	687a      	ldr	r2, [r7, #4]
 8000bac:	fa22 f303 	lsr.w	r3, r2, r3
 8000bb0:	4a0b      	ldr	r2, [pc, #44]	; (8000be0 <HAL_Init+0x70>)
 8000bb2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000bb4:	4a0b      	ldr	r2, [pc, #44]	; (8000be4 <HAL_Init+0x74>)
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bba:	2000      	movs	r0, #0
 8000bbc:	f000 f814 	bl	8000be8 <HAL_InitTick>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	e002      	b.n	8000bd0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000bca:	f7ff fedb 	bl	8000984 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bce:	2300      	movs	r3, #0
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	3708      	adds	r7, #8
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	58024400 	.word	0x58024400
 8000bdc:	08003f10 	.word	0x08003f10
 8000be0:	24000004 	.word	0x24000004
 8000be4:	24000000 	.word	0x24000000

08000be8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000bf0:	4b15      	ldr	r3, [pc, #84]	; (8000c48 <HAL_InitTick+0x60>)
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d101      	bne.n	8000bfc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	e021      	b.n	8000c40 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000bfc:	4b13      	ldr	r3, [pc, #76]	; (8000c4c <HAL_InitTick+0x64>)
 8000bfe:	681a      	ldr	r2, [r3, #0]
 8000c00:	4b11      	ldr	r3, [pc, #68]	; (8000c48 <HAL_InitTick+0x60>)
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	4619      	mov	r1, r3
 8000c06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c12:	4618      	mov	r0, r3
 8000c14:	f000 f921 	bl	8000e5a <HAL_SYSTICK_Config>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	e00e      	b.n	8000c40 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	2b0f      	cmp	r3, #15
 8000c26:	d80a      	bhi.n	8000c3e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c28:	2200      	movs	r2, #0
 8000c2a:	6879      	ldr	r1, [r7, #4]
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	f000 f8f9 	bl	8000e26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c34:	4a06      	ldr	r2, [pc, #24]	; (8000c50 <HAL_InitTick+0x68>)
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	e000      	b.n	8000c40 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000c3e:	2301      	movs	r3, #1
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	3708      	adds	r7, #8
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	2400000c 	.word	0x2400000c
 8000c4c:	24000000 	.word	0x24000000
 8000c50:	24000008 	.word	0x24000008

08000c54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c58:	4b06      	ldr	r3, [pc, #24]	; (8000c74 <HAL_IncTick+0x20>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	461a      	mov	r2, r3
 8000c5e:	4b06      	ldr	r3, [pc, #24]	; (8000c78 <HAL_IncTick+0x24>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	4413      	add	r3, r2
 8000c64:	4a04      	ldr	r2, [pc, #16]	; (8000c78 <HAL_IncTick+0x24>)
 8000c66:	6013      	str	r3, [r2, #0]
}
 8000c68:	bf00      	nop
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	2400000c 	.word	0x2400000c
 8000c78:	24000124 	.word	0x24000124

08000c7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c80:	4b03      	ldr	r3, [pc, #12]	; (8000c90 <HAL_GetTick+0x14>)
 8000c82:	681b      	ldr	r3, [r3, #0]
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	24000124 	.word	0x24000124

08000c94 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000c98:	4b03      	ldr	r3, [pc, #12]	; (8000ca8 <HAL_GetREVID+0x14>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	0c1b      	lsrs	r3, r3, #16
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr
 8000ca8:	5c001000 	.word	0x5c001000

08000cac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b085      	sub	sp, #20
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	f003 0307 	and.w	r3, r3, #7
 8000cba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cbc:	4b0b      	ldr	r3, [pc, #44]	; (8000cec <__NVIC_SetPriorityGrouping+0x40>)
 8000cbe:	68db      	ldr	r3, [r3, #12]
 8000cc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cc2:	68ba      	ldr	r2, [r7, #8]
 8000cc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cc8:	4013      	ands	r3, r2
 8000cca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cd0:	68bb      	ldr	r3, [r7, #8]
 8000cd2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000cd4:	4b06      	ldr	r3, [pc, #24]	; (8000cf0 <__NVIC_SetPriorityGrouping+0x44>)
 8000cd6:	4313      	orrs	r3, r2
 8000cd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cda:	4a04      	ldr	r2, [pc, #16]	; (8000cec <__NVIC_SetPriorityGrouping+0x40>)
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	60d3      	str	r3, [r2, #12]
}
 8000ce0:	bf00      	nop
 8000ce2:	3714      	adds	r7, #20
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr
 8000cec:	e000ed00 	.word	0xe000ed00
 8000cf0:	05fa0000 	.word	0x05fa0000

08000cf4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cf8:	4b04      	ldr	r3, [pc, #16]	; (8000d0c <__NVIC_GetPriorityGrouping+0x18>)
 8000cfa:	68db      	ldr	r3, [r3, #12]
 8000cfc:	0a1b      	lsrs	r3, r3, #8
 8000cfe:	f003 0307 	and.w	r3, r3, #7
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr
 8000d0c:	e000ed00 	.word	0xe000ed00

08000d10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	4603      	mov	r3, r0
 8000d18:	6039      	str	r1, [r7, #0]
 8000d1a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000d1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	db0a      	blt.n	8000d3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	b2da      	uxtb	r2, r3
 8000d28:	490c      	ldr	r1, [pc, #48]	; (8000d5c <__NVIC_SetPriority+0x4c>)
 8000d2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d2e:	0112      	lsls	r2, r2, #4
 8000d30:	b2d2      	uxtb	r2, r2
 8000d32:	440b      	add	r3, r1
 8000d34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d38:	e00a      	b.n	8000d50 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	b2da      	uxtb	r2, r3
 8000d3e:	4908      	ldr	r1, [pc, #32]	; (8000d60 <__NVIC_SetPriority+0x50>)
 8000d40:	88fb      	ldrh	r3, [r7, #6]
 8000d42:	f003 030f 	and.w	r3, r3, #15
 8000d46:	3b04      	subs	r3, #4
 8000d48:	0112      	lsls	r2, r2, #4
 8000d4a:	b2d2      	uxtb	r2, r2
 8000d4c:	440b      	add	r3, r1
 8000d4e:	761a      	strb	r2, [r3, #24]
}
 8000d50:	bf00      	nop
 8000d52:	370c      	adds	r7, #12
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr
 8000d5c:	e000e100 	.word	0xe000e100
 8000d60:	e000ed00 	.word	0xe000ed00

08000d64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b089      	sub	sp, #36	; 0x24
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	60f8      	str	r0, [r7, #12]
 8000d6c:	60b9      	str	r1, [r7, #8]
 8000d6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	f003 0307 	and.w	r3, r3, #7
 8000d76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d78:	69fb      	ldr	r3, [r7, #28]
 8000d7a:	f1c3 0307 	rsb	r3, r3, #7
 8000d7e:	2b04      	cmp	r3, #4
 8000d80:	bf28      	it	cs
 8000d82:	2304      	movcs	r3, #4
 8000d84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d86:	69fb      	ldr	r3, [r7, #28]
 8000d88:	3304      	adds	r3, #4
 8000d8a:	2b06      	cmp	r3, #6
 8000d8c:	d902      	bls.n	8000d94 <NVIC_EncodePriority+0x30>
 8000d8e:	69fb      	ldr	r3, [r7, #28]
 8000d90:	3b03      	subs	r3, #3
 8000d92:	e000      	b.n	8000d96 <NVIC_EncodePriority+0x32>
 8000d94:	2300      	movs	r3, #0
 8000d96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d98:	f04f 32ff 	mov.w	r2, #4294967295
 8000d9c:	69bb      	ldr	r3, [r7, #24]
 8000d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000da2:	43da      	mvns	r2, r3
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	401a      	ands	r2, r3
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dac:	f04f 31ff 	mov.w	r1, #4294967295
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	fa01 f303 	lsl.w	r3, r1, r3
 8000db6:	43d9      	mvns	r1, r3
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dbc:	4313      	orrs	r3, r2
         );
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3724      	adds	r7, #36	; 0x24
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
	...

08000dcc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	3b01      	subs	r3, #1
 8000dd8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ddc:	d301      	bcc.n	8000de2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dde:	2301      	movs	r3, #1
 8000de0:	e00f      	b.n	8000e02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000de2:	4a0a      	ldr	r2, [pc, #40]	; (8000e0c <SysTick_Config+0x40>)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	3b01      	subs	r3, #1
 8000de8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dea:	210f      	movs	r1, #15
 8000dec:	f04f 30ff 	mov.w	r0, #4294967295
 8000df0:	f7ff ff8e 	bl	8000d10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000df4:	4b05      	ldr	r3, [pc, #20]	; (8000e0c <SysTick_Config+0x40>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dfa:	4b04      	ldr	r3, [pc, #16]	; (8000e0c <SysTick_Config+0x40>)
 8000dfc:	2207      	movs	r2, #7
 8000dfe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e00:	2300      	movs	r3, #0
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3708      	adds	r7, #8
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	e000e010 	.word	0xe000e010

08000e10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e18:	6878      	ldr	r0, [r7, #4]
 8000e1a:	f7ff ff47 	bl	8000cac <__NVIC_SetPriorityGrouping>
}
 8000e1e:	bf00      	nop
 8000e20:	3708      	adds	r7, #8
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}

08000e26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e26:	b580      	push	{r7, lr}
 8000e28:	b086      	sub	sp, #24
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	60b9      	str	r1, [r7, #8]
 8000e30:	607a      	str	r2, [r7, #4]
 8000e32:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e34:	f7ff ff5e 	bl	8000cf4 <__NVIC_GetPriorityGrouping>
 8000e38:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e3a:	687a      	ldr	r2, [r7, #4]
 8000e3c:	68b9      	ldr	r1, [r7, #8]
 8000e3e:	6978      	ldr	r0, [r7, #20]
 8000e40:	f7ff ff90 	bl	8000d64 <NVIC_EncodePriority>
 8000e44:	4602      	mov	r2, r0
 8000e46:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e4a:	4611      	mov	r1, r2
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f7ff ff5f 	bl	8000d10 <__NVIC_SetPriority>
}
 8000e52:	bf00      	nop
 8000e54:	3718      	adds	r7, #24
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}

08000e5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e5a:	b580      	push	{r7, lr}
 8000e5c:	b082      	sub	sp, #8
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e62:	6878      	ldr	r0, [r7, #4]
 8000e64:	f7ff ffb2 	bl	8000dcc <SysTick_Config>
 8000e68:	4603      	mov	r3, r0
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3708      	adds	r7, #8
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
	...

08000e74 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b098      	sub	sp, #96	; 0x60
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8000e7c:	4a84      	ldr	r2, [pc, #528]	; (8001090 <HAL_FDCAN_Init+0x21c>)
 8000e7e:	f107 030c 	add.w	r3, r7, #12
 8000e82:	4611      	mov	r1, r2
 8000e84:	224c      	movs	r2, #76	; 0x4c
 8000e86:	4618      	mov	r0, r3
 8000e88:	f002 fffa 	bl	8003e80 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d101      	bne.n	8000e96 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8000e92:	2301      	movs	r3, #1
 8000e94:	e1c6      	b.n	8001224 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4a7e      	ldr	r2, [pc, #504]	; (8001094 <HAL_FDCAN_Init+0x220>)
 8000e9c:	4293      	cmp	r3, r2
 8000e9e:	d106      	bne.n	8000eae <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000ea8:	461a      	mov	r2, r3
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8000eb4:	b2db      	uxtb	r3, r3
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d106      	bne.n	8000ec8 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8000ec2:	6878      	ldr	r0, [r7, #4]
 8000ec4:	f7ff fa6c 	bl	80003a0 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	699a      	ldr	r2, [r3, #24]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f022 0210 	bic.w	r2, r2, #16
 8000ed6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ed8:	f7ff fed0 	bl	8000c7c <HAL_GetTick>
 8000edc:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000ede:	e014      	b.n	8000f0a <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000ee0:	f7ff fecc 	bl	8000c7c <HAL_GetTick>
 8000ee4:	4602      	mov	r2, r0
 8000ee6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000ee8:	1ad3      	subs	r3, r2, r3
 8000eea:	2b0a      	cmp	r3, #10
 8000eec:	d90d      	bls.n	8000f0a <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000ef4:	f043 0201 	orr.w	r2, r3, #1
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2203      	movs	r2, #3
 8000f02:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8000f06:	2301      	movs	r3, #1
 8000f08:	e18c      	b.n	8001224 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	699b      	ldr	r3, [r3, #24]
 8000f10:	f003 0308 	and.w	r3, r3, #8
 8000f14:	2b08      	cmp	r3, #8
 8000f16:	d0e3      	beq.n	8000ee0 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	699a      	ldr	r2, [r3, #24]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f042 0201 	orr.w	r2, r2, #1
 8000f26:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f28:	f7ff fea8 	bl	8000c7c <HAL_GetTick>
 8000f2c:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000f2e:	e014      	b.n	8000f5a <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000f30:	f7ff fea4 	bl	8000c7c <HAL_GetTick>
 8000f34:	4602      	mov	r2, r0
 8000f36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000f38:	1ad3      	subs	r3, r2, r3
 8000f3a:	2b0a      	cmp	r3, #10
 8000f3c:	d90d      	bls.n	8000f5a <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000f44:	f043 0201 	orr.w	r2, r3, #1
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2203      	movs	r2, #3
 8000f52:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8000f56:	2301      	movs	r3, #1
 8000f58:	e164      	b.n	8001224 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	699b      	ldr	r3, [r3, #24]
 8000f60:	f003 0301 	and.w	r3, r3, #1
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d0e3      	beq.n	8000f30 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	699a      	ldr	r2, [r3, #24]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f042 0202 	orr.w	r2, r2, #2
 8000f76:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	7c1b      	ldrb	r3, [r3, #16]
 8000f7c:	2b01      	cmp	r3, #1
 8000f7e:	d108      	bne.n	8000f92 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	699a      	ldr	r2, [r3, #24]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000f8e:	619a      	str	r2, [r3, #24]
 8000f90:	e007      	b.n	8000fa2 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	699a      	ldr	r2, [r3, #24]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000fa0:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	7c5b      	ldrb	r3, [r3, #17]
 8000fa6:	2b01      	cmp	r3, #1
 8000fa8:	d108      	bne.n	8000fbc <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	699a      	ldr	r2, [r3, #24]
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000fb8:	619a      	str	r2, [r3, #24]
 8000fba:	e007      	b.n	8000fcc <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	699a      	ldr	r2, [r3, #24]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000fca:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	7c9b      	ldrb	r3, [r3, #18]
 8000fd0:	2b01      	cmp	r3, #1
 8000fd2:	d108      	bne.n	8000fe6 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	699a      	ldr	r2, [r3, #24]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000fe2:	619a      	str	r2, [r3, #24]
 8000fe4:	e007      	b.n	8000ff6 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	699a      	ldr	r2, [r3, #24]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000ff4:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	699b      	ldr	r3, [r3, #24]
 8000ffc:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	689a      	ldr	r2, [r3, #8]
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	430a      	orrs	r2, r1
 800100a:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	699a      	ldr	r2, [r3, #24]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 800101a:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	691a      	ldr	r2, [r3, #16]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f022 0210 	bic.w	r2, r2, #16
 800102a:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	68db      	ldr	r3, [r3, #12]
 8001030:	2b01      	cmp	r3, #1
 8001032:	d108      	bne.n	8001046 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	699a      	ldr	r2, [r3, #24]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f042 0204 	orr.w	r2, r2, #4
 8001042:	619a      	str	r2, [r3, #24]
 8001044:	e030      	b.n	80010a8 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	68db      	ldr	r3, [r3, #12]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d02c      	beq.n	80010a8 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	68db      	ldr	r3, [r3, #12]
 8001052:	2b02      	cmp	r3, #2
 8001054:	d020      	beq.n	8001098 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	699a      	ldr	r2, [r3, #24]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001064:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	691a      	ldr	r2, [r3, #16]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f042 0210 	orr.w	r2, r2, #16
 8001074:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	68db      	ldr	r3, [r3, #12]
 800107a:	2b03      	cmp	r3, #3
 800107c:	d114      	bne.n	80010a8 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	699a      	ldr	r2, [r3, #24]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f042 0220 	orr.w	r2, r2, #32
 800108c:	619a      	str	r2, [r3, #24]
 800108e:	e00b      	b.n	80010a8 <HAL_FDCAN_Init+0x234>
 8001090:	08003ec4 	.word	0x08003ec4
 8001094:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	699a      	ldr	r2, [r3, #24]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f042 0220 	orr.w	r2, r2, #32
 80010a6:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	699b      	ldr	r3, [r3, #24]
 80010ac:	3b01      	subs	r3, #1
 80010ae:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	69db      	ldr	r3, [r3, #28]
 80010b4:	3b01      	subs	r3, #1
 80010b6:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80010b8:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6a1b      	ldr	r3, [r3, #32]
 80010be:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80010c0:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	695b      	ldr	r3, [r3, #20]
 80010c8:	3b01      	subs	r3, #1
 80010ca:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80010d0:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80010d2:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	689b      	ldr	r3, [r3, #8]
 80010d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80010dc:	d115      	bne.n	800110a <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010e2:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010e8:	3b01      	subs	r3, #1
 80010ea:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80010ec:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f2:	3b01      	subs	r3, #1
 80010f4:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80010f6:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010fe:	3b01      	subs	r3, #1
 8001100:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8001106:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001108:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800110e:	2b00      	cmp	r3, #0
 8001110:	d00a      	beq.n	8001128 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	430a      	orrs	r2, r1
 8001124:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001130:	4413      	add	r3, r2
 8001132:	2b00      	cmp	r3, #0
 8001134:	d011      	beq.n	800115a <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800113e:	f023 0107 	bic.w	r1, r3, #7
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	3360      	adds	r3, #96	; 0x60
 800114a:	443b      	add	r3, r7
 800114c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	430a      	orrs	r2, r1
 8001156:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115e:	2b00      	cmp	r3, #0
 8001160:	d011      	beq.n	8001186 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800116a:	f023 0107 	bic.w	r1, r3, #7
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	3360      	adds	r3, #96	; 0x60
 8001176:	443b      	add	r3, r7
 8001178:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	430a      	orrs	r2, r1
 8001182:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800118a:	2b00      	cmp	r3, #0
 800118c:	d012      	beq.n	80011b4 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001196:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	3360      	adds	r3, #96	; 0x60
 80011a2:	443b      	add	r3, r7
 80011a4:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80011a8:	011a      	lsls	r2, r3, #4
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	430a      	orrs	r2, r1
 80011b0:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d012      	beq.n	80011e2 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80011c4:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	3360      	adds	r3, #96	; 0x60
 80011d0:	443b      	add	r3, r7
 80011d2:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80011d6:	021a      	lsls	r2, r3, #8
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	430a      	orrs	r2, r1
 80011de:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4a11      	ldr	r2, [pc, #68]	; (800122c <HAL_FDCAN_Init+0x3b8>)
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d107      	bne.n	80011fc <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	689a      	ldr	r2, [r3, #8]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	f022 0203 	bic.w	r2, r2, #3
 80011fa:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2200      	movs	r2, #0
 8001200:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2200      	movs	r2, #0
 8001208:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2201      	movs	r2, #1
 8001210:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001214:	6878      	ldr	r0, [r7, #4]
 8001216:	f000 f9ff 	bl	8001618 <FDCAN_CalcultateRamBlockAddresses>
 800121a:	4603      	mov	r3, r0
 800121c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8001220:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8001224:	4618      	mov	r0, r3
 8001226:	3760      	adds	r7, #96	; 0x60
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	4000a000 	.word	0x4000a000

08001230 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800123e:	b2db      	uxtb	r3, r3
 8001240:	2b01      	cmp	r3, #1
 8001242:	d111      	bne.n	8001268 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2202      	movs	r2, #2
 8001248:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	699a      	ldr	r2, [r3, #24]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f022 0201 	bic.w	r2, r2, #1
 800125a:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2200      	movs	r2, #0
 8001260:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 8001264:	2300      	movs	r3, #0
 8001266:	e008      	b.n	800127a <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800126e:	f043 0204 	orr.w	r2, r3, #4
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001278:	2301      	movs	r3, #1
  }
}
 800127a:	4618      	mov	r0, r3
 800127c:	370c      	adds	r7, #12
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr

08001286 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 8001286:	b580      	push	{r7, lr}
 8001288:	b086      	sub	sp, #24
 800128a:	af00      	add	r7, sp, #0
 800128c:	60f8      	str	r0, [r7, #12]
 800128e:	60b9      	str	r1, [r7, #8]
 8001290:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001298:	b2db      	uxtb	r3, r3
 800129a:	2b02      	cmp	r3, #2
 800129c:	d141      	bne.n	8001322 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80012a6:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d109      	bne.n	80012c2 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80012b4:	f043 0220 	orr.w	r2, r3, #32
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	e038      	b.n	8001334 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80012ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d009      	beq.n	80012e6 <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80012d8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	e026      	b.n	8001334 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80012ee:	0c1b      	lsrs	r3, r3, #16
 80012f0:	f003 031f 	and.w	r3, r3, #31
 80012f4:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	687a      	ldr	r2, [r7, #4]
 80012fa:	68b9      	ldr	r1, [r7, #8]
 80012fc:	68f8      	ldr	r0, [r7, #12]
 80012fe:	f000 fb11 	bl	8001924 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	2101      	movs	r1, #1
 8001308:	697a      	ldr	r2, [r7, #20]
 800130a:	fa01 f202 	lsl.w	r2, r1, r2
 800130e:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8001312:	2201      	movs	r2, #1
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	409a      	lsls	r2, r3
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }

    /* Return function status */
    return HAL_OK;
 800131e:	2300      	movs	r3, #0
 8001320:	e008      	b.n	8001334 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001328:	f043 0208 	orr.w	r2, r3, #8
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001332:	2301      	movs	r3, #1
  }
}
 8001334:	4618      	mov	r0, r3
 8001336:	3718      	adds	r7, #24
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}

0800133c <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 800133c:	b480      	push	{r7}
 800133e:	b08b      	sub	sp, #44	; 0x2c
 8001340:	af00      	add	r7, sp, #0
 8001342:	60f8      	str	r0, [r7, #12]
 8001344:	60b9      	str	r1, [r7, #8]
 8001346:	607a      	str	r2, [r7, #4]
 8001348:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 800134a:	2300      	movs	r3, #0
 800134c:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001354:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8001356:	7efb      	ldrb	r3, [r7, #27]
 8001358:	2b02      	cmp	r3, #2
 800135a:	f040 814b 	bne.w	80015f4 <HAL_FDCAN_GetRxMessage+0x2b8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800135e:	68bb      	ldr	r3, [r7, #8]
 8001360:	2b40      	cmp	r3, #64	; 0x40
 8001362:	d14d      	bne.n	8001400 <HAL_FDCAN_GetRxMessage+0xc4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800136c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001370:	2b00      	cmp	r3, #0
 8001372:	d109      	bne.n	8001388 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800137a:	f043 0220 	orr.w	r2, r3, #32
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8001384:	2301      	movs	r3, #1
 8001386:	e13e      	b.n	8001606 <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001390:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001394:	2b00      	cmp	r3, #0
 8001396:	d109      	bne.n	80013ac <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800139e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80013a8:	2301      	movs	r3, #1
 80013aa:	e12c      	b.n	8001606 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80013b4:	0e1b      	lsrs	r3, r3, #24
 80013b6:	f003 0301 	and.w	r3, r3, #1
 80013ba:	2b01      	cmp	r3, #1
 80013bc:	d10b      	bne.n	80013d6 <HAL_FDCAN_GetRxMessage+0x9a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80013c6:	0fdb      	lsrs	r3, r3, #31
 80013c8:	f003 0301 	and.w	r3, r3, #1
 80013cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80013d0:	d101      	bne.n	80013d6 <HAL_FDCAN_GetRxMessage+0x9a>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80013d2:	2301      	movs	r3, #1
 80013d4:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80013de:	0a1b      	lsrs	r3, r3, #8
 80013e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80013e4:	69fa      	ldr	r2, [r7, #28]
 80013e6:	4413      	add	r3, r2
 80013e8:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f2:	69f9      	ldr	r1, [r7, #28]
 80013f4:	fb01 f303 	mul.w	r3, r1, r3
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	4413      	add	r3, r2
 80013fc:	627b      	str	r3, [r7, #36]	; 0x24
 80013fe:	e069      	b.n	80014d4 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	2b41      	cmp	r3, #65	; 0x41
 8001404:	d14d      	bne.n	80014a2 <HAL_FDCAN_GetRxMessage+0x166>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800140e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001412:	2b00      	cmp	r3, #0
 8001414:	d109      	bne.n	800142a <HAL_FDCAN_GetRxMessage+0xee>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800141c:	f043 0220 	orr.w	r2, r3, #32
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e0ed      	b.n	8001606 <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001432:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001436:	2b00      	cmp	r3, #0
 8001438:	d109      	bne.n	800144e <HAL_FDCAN_GetRxMessage+0x112>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001440:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	e0db      	b.n	8001606 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001456:	0e1b      	lsrs	r3, r3, #24
 8001458:	f003 0301 	and.w	r3, r3, #1
 800145c:	2b01      	cmp	r3, #1
 800145e:	d10b      	bne.n	8001478 <HAL_FDCAN_GetRxMessage+0x13c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001468:	0fdb      	lsrs	r3, r3, #31
 800146a:	f003 0301 	and.w	r3, r3, #1
 800146e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001472:	d101      	bne.n	8001478 <HAL_FDCAN_GetRxMessage+0x13c>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001474:	2301      	movs	r3, #1
 8001476:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001480:	0a1b      	lsrs	r3, r3, #8
 8001482:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001486:	69fa      	ldr	r2, [r7, #28]
 8001488:	4413      	add	r3, r2
 800148a:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001494:	69f9      	ldr	r1, [r7, #28]
 8001496:	fb01 f303 	mul.w	r3, r1, r3
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	4413      	add	r3, r2
 800149e:	627b      	str	r3, [r7, #36]	; 0x24
 80014a0:	e018      	b.n	80014d4 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014a6:	68ba      	ldr	r2, [r7, #8]
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d309      	bcc.n	80014c0 <HAL_FDCAN_GetRxMessage+0x184>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80014b2:	f043 0220 	orr.w	r2, r3, #32
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80014bc:	2301      	movs	r3, #1
 80014be:	e0a2      	b.n	8001606 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014c8:	68b9      	ldr	r1, [r7, #8]
 80014ca:	fb01 f303 	mul.w	r3, r1, r3
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	4413      	add	r3, r2
 80014d2:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80014d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d107      	bne.n	80014f8 <HAL_FDCAN_GetRxMessage+0x1bc>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 80014e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	0c9b      	lsrs	r3, r3, #18
 80014ee:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	601a      	str	r2, [r3, #0]
 80014f6:	e005      	b.n	8001504 <HAL_FDCAN_GetRxMessage+0x1c8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80014f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8001504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8001510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 800151c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800151e:	3304      	adds	r3, #4
 8001520:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8001522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	b29a      	uxth	r2, r3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 800152c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8001538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8001544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 8001550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	0e1b      	lsrs	r3, r3, #24
 8001556:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 800155e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	0fda      	lsrs	r2, r3, #31
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8001568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156a:	3304      	adds	r3, #4
 800156c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 800156e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001570:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8001572:	2300      	movs	r3, #0
 8001574:	623b      	str	r3, [r7, #32]
 8001576:	e00a      	b.n	800158e <HAL_FDCAN_GetRxMessage+0x252>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8001578:	697a      	ldr	r2, [r7, #20]
 800157a:	6a3b      	ldr	r3, [r7, #32]
 800157c:	441a      	add	r2, r3
 800157e:	6839      	ldr	r1, [r7, #0]
 8001580:	6a3b      	ldr	r3, [r7, #32]
 8001582:	440b      	add	r3, r1
 8001584:	7812      	ldrb	r2, [r2, #0]
 8001586:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8001588:	6a3b      	ldr	r3, [r7, #32]
 800158a:	3301      	adds	r3, #1
 800158c:	623b      	str	r3, [r7, #32]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	68db      	ldr	r3, [r3, #12]
 8001592:	0c1b      	lsrs	r3, r3, #16
 8001594:	4a1f      	ldr	r2, [pc, #124]	; (8001614 <HAL_FDCAN_GetRxMessage+0x2d8>)
 8001596:	5cd3      	ldrb	r3, [r2, r3]
 8001598:	461a      	mov	r2, r3
 800159a:	6a3b      	ldr	r3, [r7, #32]
 800159c:	4293      	cmp	r3, r2
 800159e:	d3eb      	bcc.n	8001578 <HAL_FDCAN_GetRxMessage+0x23c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	2b40      	cmp	r3, #64	; 0x40
 80015a4:	d105      	bne.n	80015b2 <HAL_FDCAN_GetRxMessage+0x276>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	69fa      	ldr	r2, [r7, #28]
 80015ac:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 80015b0:	e01e      	b.n	80015f0 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80015b2:	68bb      	ldr	r3, [r7, #8]
 80015b4:	2b41      	cmp	r3, #65	; 0x41
 80015b6:	d105      	bne.n	80015c4 <HAL_FDCAN_GetRxMessage+0x288>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	69fa      	ldr	r2, [r7, #28]
 80015be:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 80015c2:	e015      	b.n	80015f0 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	2b1f      	cmp	r3, #31
 80015c8:	d808      	bhi.n	80015dc <HAL_FDCAN_GetRxMessage+0x2a0>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	2101      	movs	r1, #1
 80015d0:	68ba      	ldr	r2, [r7, #8]
 80015d2:	fa01 f202 	lsl.w	r2, r1, r2
 80015d6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 80015da:	e009      	b.n	80015f0 <HAL_FDCAN_GetRxMessage+0x2b4>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	f003 021f 	and.w	r2, r3, #31
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	2101      	movs	r1, #1
 80015e8:	fa01 f202 	lsl.w	r2, r1, r2
 80015ec:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 80015f0:	2300      	movs	r3, #0
 80015f2:	e008      	b.n	8001606 <HAL_FDCAN_GetRxMessage+0x2ca>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80015fa:	f043 0208 	orr.w	r2, r3, #8
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001604:	2301      	movs	r3, #1
  }
}
 8001606:	4618      	mov	r0, r3
 8001608:	372c      	adds	r7, #44	; 0x2c
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	08003f20 	.word	0x08003f20

08001618 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001618:	b480      	push	{r7}
 800161a:	b085      	sub	sp, #20
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001624:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800162e:	4ba7      	ldr	r3, [pc, #668]	; (80018cc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001630:	4013      	ands	r3, r2
 8001632:	68ba      	ldr	r2, [r7, #8]
 8001634:	0091      	lsls	r1, r2, #2
 8001636:	687a      	ldr	r2, [r7, #4]
 8001638:	6812      	ldr	r2, [r2, #0]
 800163a:	430b      	orrs	r3, r1
 800163c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001648:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001650:	041a      	lsls	r2, r3, #16
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	430a      	orrs	r2, r1
 8001658:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001660:	68ba      	ldr	r2, [r7, #8]
 8001662:	4413      	add	r3, r2
 8001664:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800166e:	4b97      	ldr	r3, [pc, #604]	; (80018cc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001670:	4013      	ands	r3, r2
 8001672:	68ba      	ldr	r2, [r7, #8]
 8001674:	0091      	lsls	r1, r2, #2
 8001676:	687a      	ldr	r2, [r7, #4]
 8001678:	6812      	ldr	r2, [r2, #0]
 800167a:	430b      	orrs	r3, r1
 800167c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001688:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001690:	041a      	lsls	r2, r3, #16
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	430a      	orrs	r2, r1
 8001698:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016a0:	005b      	lsls	r3, r3, #1
 80016a2:	68ba      	ldr	r2, [r7, #8]
 80016a4:	4413      	add	r3, r2
 80016a6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80016b0:	4b86      	ldr	r3, [pc, #536]	; (80018cc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80016b2:	4013      	ands	r3, r2
 80016b4:	68ba      	ldr	r2, [r7, #8]
 80016b6:	0091      	lsls	r1, r2, #2
 80016b8:	687a      	ldr	r2, [r7, #4]
 80016ba:	6812      	ldr	r2, [r2, #0]
 80016bc:	430b      	orrs	r3, r1
 80016be:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80016ca:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d2:	041a      	lsls	r2, r3, #16
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	430a      	orrs	r2, r1
 80016da:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e2:	687a      	ldr	r2, [r7, #4]
 80016e4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80016e6:	fb02 f303 	mul.w	r3, r2, r3
 80016ea:	68ba      	ldr	r2, [r7, #8]
 80016ec:	4413      	add	r3, r2
 80016ee:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80016f8:	4b74      	ldr	r3, [pc, #464]	; (80018cc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80016fa:	4013      	ands	r3, r2
 80016fc:	68ba      	ldr	r2, [r7, #8]
 80016fe:	0091      	lsls	r1, r2, #2
 8001700:	687a      	ldr	r2, [r7, #4]
 8001702:	6812      	ldr	r2, [r2, #0]
 8001704:	430b      	orrs	r3, r1
 8001706:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001712:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800171a:	041a      	lsls	r2, r3, #16
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	430a      	orrs	r2, r1
 8001722:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800172a:	687a      	ldr	r2, [r7, #4]
 800172c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800172e:	fb02 f303 	mul.w	r3, r2, r3
 8001732:	68ba      	ldr	r2, [r7, #8]
 8001734:	4413      	add	r3, r2
 8001736:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8001740:	4b62      	ldr	r3, [pc, #392]	; (80018cc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001742:	4013      	ands	r3, r2
 8001744:	68ba      	ldr	r2, [r7, #8]
 8001746:	0091      	lsls	r1, r2, #2
 8001748:	687a      	ldr	r2, [r7, #4]
 800174a:	6812      	ldr	r2, [r2, #0]
 800174c:	430b      	orrs	r3, r1
 800174e:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001756:	687a      	ldr	r2, [r7, #4]
 8001758:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800175a:	fb02 f303 	mul.w	r3, r2, r3
 800175e:	68ba      	ldr	r2, [r7, #8]
 8001760:	4413      	add	r3, r2
 8001762:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800176c:	4b57      	ldr	r3, [pc, #348]	; (80018cc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800176e:	4013      	ands	r3, r2
 8001770:	68ba      	ldr	r2, [r7, #8]
 8001772:	0091      	lsls	r1, r2, #2
 8001774:	687a      	ldr	r2, [r7, #4]
 8001776:	6812      	ldr	r2, [r2, #0]
 8001778:	430b      	orrs	r3, r1
 800177a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001786:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800178e:	041a      	lsls	r2, r3, #16
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	430a      	orrs	r2, r1
 8001796:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800179e:	005b      	lsls	r3, r3, #1
 80017a0:	68ba      	ldr	r2, [r7, #8]
 80017a2:	4413      	add	r3, r2
 80017a4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80017ae:	4b47      	ldr	r3, [pc, #284]	; (80018cc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80017b0:	4013      	ands	r3, r2
 80017b2:	68ba      	ldr	r2, [r7, #8]
 80017b4:	0091      	lsls	r1, r2, #2
 80017b6:	687a      	ldr	r2, [r7, #4]
 80017b8:	6812      	ldr	r2, [r2, #0]
 80017ba:	430b      	orrs	r3, r1
 80017bc:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80017c8:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017d0:	041a      	lsls	r2, r3, #16
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	430a      	orrs	r2, r1
 80017d8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80017e4:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017ec:	061a      	lsls	r2, r3, #24
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	430a      	orrs	r2, r1
 80017f4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017fc:	4b34      	ldr	r3, [pc, #208]	; (80018d0 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 80017fe:	4413      	add	r3, r2
 8001800:	009a      	lsls	r2, r3, #2
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	441a      	add	r2, r3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800181e:	00db      	lsls	r3, r3, #3
 8001820:	441a      	add	r2, r3
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182e:	6879      	ldr	r1, [r7, #4]
 8001830:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8001832:	fb01 f303 	mul.w	r3, r1, r3
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	441a      	add	r2, r3
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001846:	6879      	ldr	r1, [r7, #4]
 8001848:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 800184a:	fb01 f303 	mul.w	r3, r1, r3
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	441a      	add	r2, r3
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800185e:	6879      	ldr	r1, [r7, #4]
 8001860:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8001862:	fb01 f303 	mul.w	r3, r1, r3
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	441a      	add	r2, r3
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800187a:	00db      	lsls	r3, r3, #3
 800187c:	441a      	add	r2, r3
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800188e:	6879      	ldr	r1, [r7, #4]
 8001890:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8001892:	fb01 f303 	mul.w	r3, r1, r3
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	441a      	add	r2, r3
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018aa:	6879      	ldr	r1, [r7, #4]
 80018ac:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80018ae:	fb01 f303 	mul.w	r3, r1, r3
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	441a      	add	r2, r3
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018c2:	4a04      	ldr	r2, [pc, #16]	; (80018d4 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d915      	bls.n	80018f4 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 80018c8:	e006      	b.n	80018d8 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 80018ca:	bf00      	nop
 80018cc:	ffff0003 	.word	0xffff0003
 80018d0:	10002b00 	.word	0x10002b00
 80018d4:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80018de:	f043 0220 	orr.w	r2, r3, #32
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2203      	movs	r2, #3
 80018ec:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 80018f0:	2301      	movs	r3, #1
 80018f2:	e010      	b.n	8001916 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80018f8:	60fb      	str	r3, [r7, #12]
 80018fa:	e005      	b.n	8001908 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	2200      	movs	r2, #0
 8001900:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	3304      	adds	r3, #4
 8001906:	60fb      	str	r3, [r7, #12]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800190e:	68fa      	ldr	r2, [r7, #12]
 8001910:	429a      	cmp	r2, r3
 8001912:	d3f3      	bcc.n	80018fc <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8001914:	2300      	movs	r3, #0
}
 8001916:	4618      	mov	r0, r3
 8001918:	3714      	adds	r7, #20
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop

08001924 <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval HAL status
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 8001924:	b480      	push	{r7}
 8001926:	b089      	sub	sp, #36	; 0x24
 8001928:	af00      	add	r7, sp, #0
 800192a:	60f8      	str	r0, [r7, #12]
 800192c:	60b9      	str	r1, [r7, #8]
 800192e:	607a      	str	r2, [r7, #4]
 8001930:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8001932:	68bb      	ldr	r3, [r7, #8]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d10a      	bne.n	8001950 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8001942:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18));
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800194a:	4313      	orrs	r3, r2
 800194c:	61fb      	str	r3, [r7, #28]
 800194e:	e00a      	b.n	8001966 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8001958:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800195a:	68bb      	ldr	r3, [r7, #8]
 800195c:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800195e:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001960:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001964:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	6a1b      	ldr	r3, [r3, #32]
 800196a:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8001970:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8001976:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 800197c:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8001982:	4313      	orrs	r3, r2
 8001984:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001990:	6839      	ldr	r1, [r7, #0]
 8001992:	fb01 f303 	mul.w	r3, r1, r3
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	4413      	add	r3, r2
 800199a:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 800199c:	69bb      	ldr	r3, [r7, #24]
 800199e:	69fa      	ldr	r2, [r7, #28]
 80019a0:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80019a2:	69bb      	ldr	r3, [r7, #24]
 80019a4:	3304      	adds	r3, #4
 80019a6:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80019a8:	69bb      	ldr	r3, [r7, #24]
 80019aa:	693a      	ldr	r2, [r7, #16]
 80019ac:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80019ae:	69bb      	ldr	r3, [r7, #24]
 80019b0:	3304      	adds	r3, #4
 80019b2:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 80019b4:	2300      	movs	r3, #0
 80019b6:	617b      	str	r3, [r7, #20]
 80019b8:	e020      	b.n	80019fc <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	3303      	adds	r3, #3
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	4413      	add	r3, r2
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	3302      	adds	r3, #2
 80019ca:	6879      	ldr	r1, [r7, #4]
 80019cc:	440b      	add	r3, r1
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 80019d2:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	3301      	adds	r3, #1
 80019d8:	6879      	ldr	r1, [r7, #4]
 80019da:	440b      	add	r3, r1
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 80019e0:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80019e2:	6879      	ldr	r1, [r7, #4]
 80019e4:	697a      	ldr	r2, [r7, #20]
 80019e6:	440a      	add	r2, r1
 80019e8:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 80019ea:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 80019ec:	69bb      	ldr	r3, [r7, #24]
 80019ee:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80019f0:	69bb      	ldr	r3, [r7, #24]
 80019f2:	3304      	adds	r3, #4
 80019f4:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	3304      	adds	r3, #4
 80019fa:	617b      	str	r3, [r7, #20]
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	0c1b      	lsrs	r3, r3, #16
 8001a02:	4a06      	ldr	r2, [pc, #24]	; (8001a1c <FDCAN_CopyMessageToRAM+0xf8>)
 8001a04:	5cd3      	ldrb	r3, [r2, r3]
 8001a06:	461a      	mov	r2, r3
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d3d5      	bcc.n	80019ba <FDCAN_CopyMessageToRAM+0x96>
  }
}
 8001a0e:	bf00      	nop
 8001a10:	bf00      	nop
 8001a12:	3724      	adds	r7, #36	; 0x24
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr
 8001a1c:	08003f20 	.word	0x08003f20

08001a20 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b089      	sub	sp, #36	; 0x24
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001a2e:	4b89      	ldr	r3, [pc, #548]	; (8001c54 <HAL_GPIO_Init+0x234>)
 8001a30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001a32:	e194      	b.n	8001d5e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	2101      	movs	r1, #1
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a40:	4013      	ands	r3, r2
 8001a42:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	f000 8186 	beq.w	8001d58 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f003 0303 	and.w	r3, r3, #3
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d005      	beq.n	8001a64 <HAL_GPIO_Init+0x44>
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f003 0303 	and.w	r3, r3, #3
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	d130      	bne.n	8001ac6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	005b      	lsls	r3, r3, #1
 8001a6e:	2203      	movs	r2, #3
 8001a70:	fa02 f303 	lsl.w	r3, r2, r3
 8001a74:	43db      	mvns	r3, r3
 8001a76:	69ba      	ldr	r2, [r7, #24]
 8001a78:	4013      	ands	r3, r2
 8001a7a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	68da      	ldr	r2, [r3, #12]
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	005b      	lsls	r3, r3, #1
 8001a84:	fa02 f303 	lsl.w	r3, r2, r3
 8001a88:	69ba      	ldr	r2, [r7, #24]
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	69ba      	ldr	r2, [r7, #24]
 8001a92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa2:	43db      	mvns	r3, r3
 8001aa4:	69ba      	ldr	r2, [r7, #24]
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	091b      	lsrs	r3, r3, #4
 8001ab0:	f003 0201 	and.w	r2, r3, #1
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aba:	69ba      	ldr	r2, [r7, #24]
 8001abc:	4313      	orrs	r3, r2
 8001abe:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	69ba      	ldr	r2, [r7, #24]
 8001ac4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	f003 0303 	and.w	r3, r3, #3
 8001ace:	2b03      	cmp	r3, #3
 8001ad0:	d017      	beq.n	8001b02 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	68db      	ldr	r3, [r3, #12]
 8001ad6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	005b      	lsls	r3, r3, #1
 8001adc:	2203      	movs	r2, #3
 8001ade:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae2:	43db      	mvns	r3, r3
 8001ae4:	69ba      	ldr	r2, [r7, #24]
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	689a      	ldr	r2, [r3, #8]
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	005b      	lsls	r3, r3, #1
 8001af2:	fa02 f303 	lsl.w	r3, r2, r3
 8001af6:	69ba      	ldr	r2, [r7, #24]
 8001af8:	4313      	orrs	r3, r2
 8001afa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	69ba      	ldr	r2, [r7, #24]
 8001b00:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f003 0303 	and.w	r3, r3, #3
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d123      	bne.n	8001b56 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	08da      	lsrs	r2, r3, #3
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	3208      	adds	r2, #8
 8001b16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	f003 0307 	and.w	r3, r3, #7
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	220f      	movs	r2, #15
 8001b26:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2a:	43db      	mvns	r3, r3
 8001b2c:	69ba      	ldr	r2, [r7, #24]
 8001b2e:	4013      	ands	r3, r2
 8001b30:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	691a      	ldr	r2, [r3, #16]
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	f003 0307 	and.w	r3, r3, #7
 8001b3c:	009b      	lsls	r3, r3, #2
 8001b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b42:	69ba      	ldr	r2, [r7, #24]
 8001b44:	4313      	orrs	r3, r2
 8001b46:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b48:	69fb      	ldr	r3, [r7, #28]
 8001b4a:	08da      	lsrs	r2, r3, #3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	3208      	adds	r2, #8
 8001b50:	69b9      	ldr	r1, [r7, #24]
 8001b52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	005b      	lsls	r3, r3, #1
 8001b60:	2203      	movs	r2, #3
 8001b62:	fa02 f303 	lsl.w	r3, r2, r3
 8001b66:	43db      	mvns	r3, r3
 8001b68:	69ba      	ldr	r2, [r7, #24]
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f003 0203 	and.w	r2, r3, #3
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	005b      	lsls	r3, r3, #1
 8001b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7e:	69ba      	ldr	r2, [r7, #24]
 8001b80:	4313      	orrs	r3, r2
 8001b82:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	69ba      	ldr	r2, [r7, #24]
 8001b88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	f000 80e0 	beq.w	8001d58 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b98:	4b2f      	ldr	r3, [pc, #188]	; (8001c58 <HAL_GPIO_Init+0x238>)
 8001b9a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001b9e:	4a2e      	ldr	r2, [pc, #184]	; (8001c58 <HAL_GPIO_Init+0x238>)
 8001ba0:	f043 0302 	orr.w	r3, r3, #2
 8001ba4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001ba8:	4b2b      	ldr	r3, [pc, #172]	; (8001c58 <HAL_GPIO_Init+0x238>)
 8001baa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001bae:	f003 0302 	and.w	r3, r3, #2
 8001bb2:	60fb      	str	r3, [r7, #12]
 8001bb4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bb6:	4a29      	ldr	r2, [pc, #164]	; (8001c5c <HAL_GPIO_Init+0x23c>)
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	089b      	lsrs	r3, r3, #2
 8001bbc:	3302      	adds	r3, #2
 8001bbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	f003 0303 	and.w	r3, r3, #3
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	220f      	movs	r2, #15
 8001bce:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd2:	43db      	mvns	r3, r3
 8001bd4:	69ba      	ldr	r2, [r7, #24]
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4a20      	ldr	r2, [pc, #128]	; (8001c60 <HAL_GPIO_Init+0x240>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d052      	beq.n	8001c88 <HAL_GPIO_Init+0x268>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4a1f      	ldr	r2, [pc, #124]	; (8001c64 <HAL_GPIO_Init+0x244>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d031      	beq.n	8001c4e <HAL_GPIO_Init+0x22e>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4a1e      	ldr	r2, [pc, #120]	; (8001c68 <HAL_GPIO_Init+0x248>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d02b      	beq.n	8001c4a <HAL_GPIO_Init+0x22a>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4a1d      	ldr	r2, [pc, #116]	; (8001c6c <HAL_GPIO_Init+0x24c>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d025      	beq.n	8001c46 <HAL_GPIO_Init+0x226>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4a1c      	ldr	r2, [pc, #112]	; (8001c70 <HAL_GPIO_Init+0x250>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d01f      	beq.n	8001c42 <HAL_GPIO_Init+0x222>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4a1b      	ldr	r2, [pc, #108]	; (8001c74 <HAL_GPIO_Init+0x254>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d019      	beq.n	8001c3e <HAL_GPIO_Init+0x21e>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4a1a      	ldr	r2, [pc, #104]	; (8001c78 <HAL_GPIO_Init+0x258>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d013      	beq.n	8001c3a <HAL_GPIO_Init+0x21a>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4a19      	ldr	r2, [pc, #100]	; (8001c7c <HAL_GPIO_Init+0x25c>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d00d      	beq.n	8001c36 <HAL_GPIO_Init+0x216>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4a18      	ldr	r2, [pc, #96]	; (8001c80 <HAL_GPIO_Init+0x260>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d007      	beq.n	8001c32 <HAL_GPIO_Init+0x212>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4a17      	ldr	r2, [pc, #92]	; (8001c84 <HAL_GPIO_Init+0x264>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d101      	bne.n	8001c2e <HAL_GPIO_Init+0x20e>
 8001c2a:	2309      	movs	r3, #9
 8001c2c:	e02d      	b.n	8001c8a <HAL_GPIO_Init+0x26a>
 8001c2e:	230a      	movs	r3, #10
 8001c30:	e02b      	b.n	8001c8a <HAL_GPIO_Init+0x26a>
 8001c32:	2308      	movs	r3, #8
 8001c34:	e029      	b.n	8001c8a <HAL_GPIO_Init+0x26a>
 8001c36:	2307      	movs	r3, #7
 8001c38:	e027      	b.n	8001c8a <HAL_GPIO_Init+0x26a>
 8001c3a:	2306      	movs	r3, #6
 8001c3c:	e025      	b.n	8001c8a <HAL_GPIO_Init+0x26a>
 8001c3e:	2305      	movs	r3, #5
 8001c40:	e023      	b.n	8001c8a <HAL_GPIO_Init+0x26a>
 8001c42:	2304      	movs	r3, #4
 8001c44:	e021      	b.n	8001c8a <HAL_GPIO_Init+0x26a>
 8001c46:	2303      	movs	r3, #3
 8001c48:	e01f      	b.n	8001c8a <HAL_GPIO_Init+0x26a>
 8001c4a:	2302      	movs	r3, #2
 8001c4c:	e01d      	b.n	8001c8a <HAL_GPIO_Init+0x26a>
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e01b      	b.n	8001c8a <HAL_GPIO_Init+0x26a>
 8001c52:	bf00      	nop
 8001c54:	58000080 	.word	0x58000080
 8001c58:	58024400 	.word	0x58024400
 8001c5c:	58000400 	.word	0x58000400
 8001c60:	58020000 	.word	0x58020000
 8001c64:	58020400 	.word	0x58020400
 8001c68:	58020800 	.word	0x58020800
 8001c6c:	58020c00 	.word	0x58020c00
 8001c70:	58021000 	.word	0x58021000
 8001c74:	58021400 	.word	0x58021400
 8001c78:	58021800 	.word	0x58021800
 8001c7c:	58021c00 	.word	0x58021c00
 8001c80:	58022000 	.word	0x58022000
 8001c84:	58022400 	.word	0x58022400
 8001c88:	2300      	movs	r3, #0
 8001c8a:	69fa      	ldr	r2, [r7, #28]
 8001c8c:	f002 0203 	and.w	r2, r2, #3
 8001c90:	0092      	lsls	r2, r2, #2
 8001c92:	4093      	lsls	r3, r2
 8001c94:	69ba      	ldr	r2, [r7, #24]
 8001c96:	4313      	orrs	r3, r2
 8001c98:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c9a:	4938      	ldr	r1, [pc, #224]	; (8001d7c <HAL_GPIO_Init+0x35c>)
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	089b      	lsrs	r3, r3, #2
 8001ca0:	3302      	adds	r3, #2
 8001ca2:	69ba      	ldr	r2, [r7, #24]
 8001ca4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ca8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	43db      	mvns	r3, r3
 8001cb4:	69ba      	ldr	r2, [r7, #24]
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d003      	beq.n	8001cce <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001cc6:	69ba      	ldr	r2, [r7, #24]
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001cce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001cd2:	69bb      	ldr	r3, [r7, #24]
 8001cd4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001cd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	43db      	mvns	r3, r3
 8001ce2:	69ba      	ldr	r2, [r7, #24]
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d003      	beq.n	8001cfc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001cf4:	69ba      	ldr	r2, [r7, #24]
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001cfc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d00:	69bb      	ldr	r3, [r7, #24]
 8001d02:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	43db      	mvns	r3, r3
 8001d0e:	69ba      	ldr	r2, [r7, #24]
 8001d10:	4013      	ands	r3, r2
 8001d12:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d003      	beq.n	8001d28 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001d20:	69ba      	ldr	r2, [r7, #24]
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	4313      	orrs	r3, r2
 8001d26:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	69ba      	ldr	r2, [r7, #24]
 8001d2c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	43db      	mvns	r3, r3
 8001d38:	69ba      	ldr	r2, [r7, #24]
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d003      	beq.n	8001d52 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001d4a:	69ba      	ldr	r2, [r7, #24]
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	69ba      	ldr	r2, [r7, #24]
 8001d56:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	fa22 f303 	lsr.w	r3, r2, r3
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	f47f ae63 	bne.w	8001a34 <HAL_GPIO_Init+0x14>
  }
}
 8001d6e:	bf00      	nop
 8001d70:	bf00      	nop
 8001d72:	3724      	adds	r7, #36	; 0x24
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr
 8001d7c:	58000400 	.word	0x58000400

08001d80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	460b      	mov	r3, r1
 8001d8a:	807b      	strh	r3, [r7, #2]
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d90:	787b      	ldrb	r3, [r7, #1]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d003      	beq.n	8001d9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d96:	887a      	ldrh	r2, [r7, #2]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001d9c:	e003      	b.n	8001da6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001d9e:	887b      	ldrh	r3, [r7, #2]
 8001da0:	041a      	lsls	r2, r3, #16
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	619a      	str	r2, [r3, #24]
}
 8001da6:	bf00      	nop
 8001da8:	370c      	adds	r7, #12
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
	...

08001db4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b084      	sub	sp, #16
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001dbc:	4b19      	ldr	r3, [pc, #100]	; (8001e24 <HAL_PWREx_ConfigSupply+0x70>)
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	f003 0304 	and.w	r3, r3, #4
 8001dc4:	2b04      	cmp	r3, #4
 8001dc6:	d00a      	beq.n	8001dde <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001dc8:	4b16      	ldr	r3, [pc, #88]	; (8001e24 <HAL_PWREx_ConfigSupply+0x70>)
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	f003 0307 	and.w	r3, r3, #7
 8001dd0:	687a      	ldr	r2, [r7, #4]
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d001      	beq.n	8001dda <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e01f      	b.n	8001e1a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	e01d      	b.n	8001e1a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001dde:	4b11      	ldr	r3, [pc, #68]	; (8001e24 <HAL_PWREx_ConfigSupply+0x70>)
 8001de0:	68db      	ldr	r3, [r3, #12]
 8001de2:	f023 0207 	bic.w	r2, r3, #7
 8001de6:	490f      	ldr	r1, [pc, #60]	; (8001e24 <HAL_PWREx_ConfigSupply+0x70>)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	4313      	orrs	r3, r2
 8001dec:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001dee:	f7fe ff45 	bl	8000c7c <HAL_GetTick>
 8001df2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001df4:	e009      	b.n	8001e0a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001df6:	f7fe ff41 	bl	8000c7c <HAL_GetTick>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	1ad3      	subs	r3, r2, r3
 8001e00:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e04:	d901      	bls.n	8001e0a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e007      	b.n	8001e1a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001e0a:	4b06      	ldr	r3, [pc, #24]	; (8001e24 <HAL_PWREx_ConfigSupply+0x70>)
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e16:	d1ee      	bne.n	8001df6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001e18:	2300      	movs	r3, #0
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3710      	adds	r7, #16
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	58024800 	.word	0x58024800

08001e28 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b08c      	sub	sp, #48	; 0x30
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d102      	bne.n	8001e3c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	f000 bc1d 	b.w	8002676 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 0301 	and.w	r3, r3, #1
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	f000 8087 	beq.w	8001f58 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e4a:	4b99      	ldr	r3, [pc, #612]	; (80020b0 <HAL_RCC_OscConfig+0x288>)
 8001e4c:	691b      	ldr	r3, [r3, #16]
 8001e4e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001e52:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001e54:	4b96      	ldr	r3, [pc, #600]	; (80020b0 <HAL_RCC_OscConfig+0x288>)
 8001e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e58:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e5c:	2b10      	cmp	r3, #16
 8001e5e:	d007      	beq.n	8001e70 <HAL_RCC_OscConfig+0x48>
 8001e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e62:	2b18      	cmp	r3, #24
 8001e64:	d110      	bne.n	8001e88 <HAL_RCC_OscConfig+0x60>
 8001e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e68:	f003 0303 	and.w	r3, r3, #3
 8001e6c:	2b02      	cmp	r3, #2
 8001e6e:	d10b      	bne.n	8001e88 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e70:	4b8f      	ldr	r3, [pc, #572]	; (80020b0 <HAL_RCC_OscConfig+0x288>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d06c      	beq.n	8001f56 <HAL_RCC_OscConfig+0x12e>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d168      	bne.n	8001f56 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	e3f6      	b.n	8002676 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e90:	d106      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x78>
 8001e92:	4b87      	ldr	r3, [pc, #540]	; (80020b0 <HAL_RCC_OscConfig+0x288>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a86      	ldr	r2, [pc, #536]	; (80020b0 <HAL_RCC_OscConfig+0x288>)
 8001e98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e9c:	6013      	str	r3, [r2, #0]
 8001e9e:	e02e      	b.n	8001efe <HAL_RCC_OscConfig+0xd6>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d10c      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x9a>
 8001ea8:	4b81      	ldr	r3, [pc, #516]	; (80020b0 <HAL_RCC_OscConfig+0x288>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a80      	ldr	r2, [pc, #512]	; (80020b0 <HAL_RCC_OscConfig+0x288>)
 8001eae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eb2:	6013      	str	r3, [r2, #0]
 8001eb4:	4b7e      	ldr	r3, [pc, #504]	; (80020b0 <HAL_RCC_OscConfig+0x288>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a7d      	ldr	r2, [pc, #500]	; (80020b0 <HAL_RCC_OscConfig+0x288>)
 8001eba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ebe:	6013      	str	r3, [r2, #0]
 8001ec0:	e01d      	b.n	8001efe <HAL_RCC_OscConfig+0xd6>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001eca:	d10c      	bne.n	8001ee6 <HAL_RCC_OscConfig+0xbe>
 8001ecc:	4b78      	ldr	r3, [pc, #480]	; (80020b0 <HAL_RCC_OscConfig+0x288>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a77      	ldr	r2, [pc, #476]	; (80020b0 <HAL_RCC_OscConfig+0x288>)
 8001ed2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ed6:	6013      	str	r3, [r2, #0]
 8001ed8:	4b75      	ldr	r3, [pc, #468]	; (80020b0 <HAL_RCC_OscConfig+0x288>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a74      	ldr	r2, [pc, #464]	; (80020b0 <HAL_RCC_OscConfig+0x288>)
 8001ede:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ee2:	6013      	str	r3, [r2, #0]
 8001ee4:	e00b      	b.n	8001efe <HAL_RCC_OscConfig+0xd6>
 8001ee6:	4b72      	ldr	r3, [pc, #456]	; (80020b0 <HAL_RCC_OscConfig+0x288>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a71      	ldr	r2, [pc, #452]	; (80020b0 <HAL_RCC_OscConfig+0x288>)
 8001eec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ef0:	6013      	str	r3, [r2, #0]
 8001ef2:	4b6f      	ldr	r3, [pc, #444]	; (80020b0 <HAL_RCC_OscConfig+0x288>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a6e      	ldr	r2, [pc, #440]	; (80020b0 <HAL_RCC_OscConfig+0x288>)
 8001ef8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001efc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d013      	beq.n	8001f2e <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f06:	f7fe feb9 	bl	8000c7c <HAL_GetTick>
 8001f0a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001f0c:	e008      	b.n	8001f20 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f0e:	f7fe feb5 	bl	8000c7c <HAL_GetTick>
 8001f12:	4602      	mov	r2, r0
 8001f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	2b64      	cmp	r3, #100	; 0x64
 8001f1a:	d901      	bls.n	8001f20 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	e3aa      	b.n	8002676 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001f20:	4b63      	ldr	r3, [pc, #396]	; (80020b0 <HAL_RCC_OscConfig+0x288>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d0f0      	beq.n	8001f0e <HAL_RCC_OscConfig+0xe6>
 8001f2c:	e014      	b.n	8001f58 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f2e:	f7fe fea5 	bl	8000c7c <HAL_GetTick>
 8001f32:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001f34:	e008      	b.n	8001f48 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f36:	f7fe fea1 	bl	8000c7c <HAL_GetTick>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3e:	1ad3      	subs	r3, r2, r3
 8001f40:	2b64      	cmp	r3, #100	; 0x64
 8001f42:	d901      	bls.n	8001f48 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8001f44:	2303      	movs	r3, #3
 8001f46:	e396      	b.n	8002676 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001f48:	4b59      	ldr	r3, [pc, #356]	; (80020b0 <HAL_RCC_OscConfig+0x288>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d1f0      	bne.n	8001f36 <HAL_RCC_OscConfig+0x10e>
 8001f54:	e000      	b.n	8001f58 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f56:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 0302 	and.w	r3, r3, #2
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	f000 80cb 	beq.w	80020fc <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f66:	4b52      	ldr	r3, [pc, #328]	; (80020b0 <HAL_RCC_OscConfig+0x288>)
 8001f68:	691b      	ldr	r3, [r3, #16]
 8001f6a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001f6e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001f70:	4b4f      	ldr	r3, [pc, #316]	; (80020b0 <HAL_RCC_OscConfig+0x288>)
 8001f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f74:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001f76:	6a3b      	ldr	r3, [r7, #32]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d007      	beq.n	8001f8c <HAL_RCC_OscConfig+0x164>
 8001f7c:	6a3b      	ldr	r3, [r7, #32]
 8001f7e:	2b18      	cmp	r3, #24
 8001f80:	d156      	bne.n	8002030 <HAL_RCC_OscConfig+0x208>
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	f003 0303 	and.w	r3, r3, #3
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d151      	bne.n	8002030 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f8c:	4b48      	ldr	r3, [pc, #288]	; (80020b0 <HAL_RCC_OscConfig+0x288>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 0304 	and.w	r3, r3, #4
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d005      	beq.n	8001fa4 <HAL_RCC_OscConfig+0x17c>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d101      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e368      	b.n	8002676 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001fa4:	4b42      	ldr	r3, [pc, #264]	; (80020b0 <HAL_RCC_OscConfig+0x288>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f023 0219 	bic.w	r2, r3, #25
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	493f      	ldr	r1, [pc, #252]	; (80020b0 <HAL_RCC_OscConfig+0x288>)
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001fb6:	f7fe fe61 	bl	8000c7c <HAL_GetTick>
 8001fba:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001fbc:	e008      	b.n	8001fd0 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fbe:	f7fe fe5d 	bl	8000c7c <HAL_GetTick>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc6:	1ad3      	subs	r3, r2, r3
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d901      	bls.n	8001fd0 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8001fcc:	2303      	movs	r3, #3
 8001fce:	e352      	b.n	8002676 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001fd0:	4b37      	ldr	r3, [pc, #220]	; (80020b0 <HAL_RCC_OscConfig+0x288>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 0304 	and.w	r3, r3, #4
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d0f0      	beq.n	8001fbe <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fdc:	f7fe fe5a 	bl	8000c94 <HAL_GetREVID>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	f241 0203 	movw	r2, #4099	; 0x1003
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d817      	bhi.n	800201a <HAL_RCC_OscConfig+0x1f2>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	691b      	ldr	r3, [r3, #16]
 8001fee:	2b40      	cmp	r3, #64	; 0x40
 8001ff0:	d108      	bne.n	8002004 <HAL_RCC_OscConfig+0x1dc>
 8001ff2:	4b2f      	ldr	r3, [pc, #188]	; (80020b0 <HAL_RCC_OscConfig+0x288>)
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001ffa:	4a2d      	ldr	r2, [pc, #180]	; (80020b0 <HAL_RCC_OscConfig+0x288>)
 8001ffc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002000:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002002:	e07b      	b.n	80020fc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002004:	4b2a      	ldr	r3, [pc, #168]	; (80020b0 <HAL_RCC_OscConfig+0x288>)
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	691b      	ldr	r3, [r3, #16]
 8002010:	031b      	lsls	r3, r3, #12
 8002012:	4927      	ldr	r1, [pc, #156]	; (80020b0 <HAL_RCC_OscConfig+0x288>)
 8002014:	4313      	orrs	r3, r2
 8002016:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002018:	e070      	b.n	80020fc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800201a:	4b25      	ldr	r3, [pc, #148]	; (80020b0 <HAL_RCC_OscConfig+0x288>)
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	691b      	ldr	r3, [r3, #16]
 8002026:	061b      	lsls	r3, r3, #24
 8002028:	4921      	ldr	r1, [pc, #132]	; (80020b0 <HAL_RCC_OscConfig+0x288>)
 800202a:	4313      	orrs	r3, r2
 800202c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800202e:	e065      	b.n	80020fc <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d048      	beq.n	80020ca <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002038:	4b1d      	ldr	r3, [pc, #116]	; (80020b0 <HAL_RCC_OscConfig+0x288>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f023 0219 	bic.w	r2, r3, #25
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	491a      	ldr	r1, [pc, #104]	; (80020b0 <HAL_RCC_OscConfig+0x288>)
 8002046:	4313      	orrs	r3, r2
 8002048:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800204a:	f7fe fe17 	bl	8000c7c <HAL_GetTick>
 800204e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002050:	e008      	b.n	8002064 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002052:	f7fe fe13 	bl	8000c7c <HAL_GetTick>
 8002056:	4602      	mov	r2, r0
 8002058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205a:	1ad3      	subs	r3, r2, r3
 800205c:	2b02      	cmp	r3, #2
 800205e:	d901      	bls.n	8002064 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8002060:	2303      	movs	r3, #3
 8002062:	e308      	b.n	8002676 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002064:	4b12      	ldr	r3, [pc, #72]	; (80020b0 <HAL_RCC_OscConfig+0x288>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 0304 	and.w	r3, r3, #4
 800206c:	2b00      	cmp	r3, #0
 800206e:	d0f0      	beq.n	8002052 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002070:	f7fe fe10 	bl	8000c94 <HAL_GetREVID>
 8002074:	4603      	mov	r3, r0
 8002076:	f241 0203 	movw	r2, #4099	; 0x1003
 800207a:	4293      	cmp	r3, r2
 800207c:	d81a      	bhi.n	80020b4 <HAL_RCC_OscConfig+0x28c>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	691b      	ldr	r3, [r3, #16]
 8002082:	2b40      	cmp	r3, #64	; 0x40
 8002084:	d108      	bne.n	8002098 <HAL_RCC_OscConfig+0x270>
 8002086:	4b0a      	ldr	r3, [pc, #40]	; (80020b0 <HAL_RCC_OscConfig+0x288>)
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800208e:	4a08      	ldr	r2, [pc, #32]	; (80020b0 <HAL_RCC_OscConfig+0x288>)
 8002090:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002094:	6053      	str	r3, [r2, #4]
 8002096:	e031      	b.n	80020fc <HAL_RCC_OscConfig+0x2d4>
 8002098:	4b05      	ldr	r3, [pc, #20]	; (80020b0 <HAL_RCC_OscConfig+0x288>)
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	691b      	ldr	r3, [r3, #16]
 80020a4:	031b      	lsls	r3, r3, #12
 80020a6:	4902      	ldr	r1, [pc, #8]	; (80020b0 <HAL_RCC_OscConfig+0x288>)
 80020a8:	4313      	orrs	r3, r2
 80020aa:	604b      	str	r3, [r1, #4]
 80020ac:	e026      	b.n	80020fc <HAL_RCC_OscConfig+0x2d4>
 80020ae:	bf00      	nop
 80020b0:	58024400 	.word	0x58024400
 80020b4:	4b9a      	ldr	r3, [pc, #616]	; (8002320 <HAL_RCC_OscConfig+0x4f8>)
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	691b      	ldr	r3, [r3, #16]
 80020c0:	061b      	lsls	r3, r3, #24
 80020c2:	4997      	ldr	r1, [pc, #604]	; (8002320 <HAL_RCC_OscConfig+0x4f8>)
 80020c4:	4313      	orrs	r3, r2
 80020c6:	604b      	str	r3, [r1, #4]
 80020c8:	e018      	b.n	80020fc <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020ca:	4b95      	ldr	r3, [pc, #596]	; (8002320 <HAL_RCC_OscConfig+0x4f8>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a94      	ldr	r2, [pc, #592]	; (8002320 <HAL_RCC_OscConfig+0x4f8>)
 80020d0:	f023 0301 	bic.w	r3, r3, #1
 80020d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020d6:	f7fe fdd1 	bl	8000c7c <HAL_GetTick>
 80020da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80020dc:	e008      	b.n	80020f0 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020de:	f7fe fdcd 	bl	8000c7c <HAL_GetTick>
 80020e2:	4602      	mov	r2, r0
 80020e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e6:	1ad3      	subs	r3, r2, r3
 80020e8:	2b02      	cmp	r3, #2
 80020ea:	d901      	bls.n	80020f0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80020ec:	2303      	movs	r3, #3
 80020ee:	e2c2      	b.n	8002676 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80020f0:	4b8b      	ldr	r3, [pc, #556]	; (8002320 <HAL_RCC_OscConfig+0x4f8>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0304 	and.w	r3, r3, #4
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d1f0      	bne.n	80020de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0310 	and.w	r3, r3, #16
 8002104:	2b00      	cmp	r3, #0
 8002106:	f000 80a9 	beq.w	800225c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800210a:	4b85      	ldr	r3, [pc, #532]	; (8002320 <HAL_RCC_OscConfig+0x4f8>)
 800210c:	691b      	ldr	r3, [r3, #16]
 800210e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002112:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002114:	4b82      	ldr	r3, [pc, #520]	; (8002320 <HAL_RCC_OscConfig+0x4f8>)
 8002116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002118:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800211a:	69bb      	ldr	r3, [r7, #24]
 800211c:	2b08      	cmp	r3, #8
 800211e:	d007      	beq.n	8002130 <HAL_RCC_OscConfig+0x308>
 8002120:	69bb      	ldr	r3, [r7, #24]
 8002122:	2b18      	cmp	r3, #24
 8002124:	d13a      	bne.n	800219c <HAL_RCC_OscConfig+0x374>
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	f003 0303 	and.w	r3, r3, #3
 800212c:	2b01      	cmp	r3, #1
 800212e:	d135      	bne.n	800219c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002130:	4b7b      	ldr	r3, [pc, #492]	; (8002320 <HAL_RCC_OscConfig+0x4f8>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002138:	2b00      	cmp	r3, #0
 800213a:	d005      	beq.n	8002148 <HAL_RCC_OscConfig+0x320>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	69db      	ldr	r3, [r3, #28]
 8002140:	2b80      	cmp	r3, #128	; 0x80
 8002142:	d001      	beq.n	8002148 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e296      	b.n	8002676 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002148:	f7fe fda4 	bl	8000c94 <HAL_GetREVID>
 800214c:	4603      	mov	r3, r0
 800214e:	f241 0203 	movw	r2, #4099	; 0x1003
 8002152:	4293      	cmp	r3, r2
 8002154:	d817      	bhi.n	8002186 <HAL_RCC_OscConfig+0x35e>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6a1b      	ldr	r3, [r3, #32]
 800215a:	2b20      	cmp	r3, #32
 800215c:	d108      	bne.n	8002170 <HAL_RCC_OscConfig+0x348>
 800215e:	4b70      	ldr	r3, [pc, #448]	; (8002320 <HAL_RCC_OscConfig+0x4f8>)
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002166:	4a6e      	ldr	r2, [pc, #440]	; (8002320 <HAL_RCC_OscConfig+0x4f8>)
 8002168:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800216c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800216e:	e075      	b.n	800225c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002170:	4b6b      	ldr	r3, [pc, #428]	; (8002320 <HAL_RCC_OscConfig+0x4f8>)
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6a1b      	ldr	r3, [r3, #32]
 800217c:	069b      	lsls	r3, r3, #26
 800217e:	4968      	ldr	r1, [pc, #416]	; (8002320 <HAL_RCC_OscConfig+0x4f8>)
 8002180:	4313      	orrs	r3, r2
 8002182:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002184:	e06a      	b.n	800225c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002186:	4b66      	ldr	r3, [pc, #408]	; (8002320 <HAL_RCC_OscConfig+0x4f8>)
 8002188:	68db      	ldr	r3, [r3, #12]
 800218a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6a1b      	ldr	r3, [r3, #32]
 8002192:	061b      	lsls	r3, r3, #24
 8002194:	4962      	ldr	r1, [pc, #392]	; (8002320 <HAL_RCC_OscConfig+0x4f8>)
 8002196:	4313      	orrs	r3, r2
 8002198:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800219a:	e05f      	b.n	800225c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	69db      	ldr	r3, [r3, #28]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d042      	beq.n	800222a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80021a4:	4b5e      	ldr	r3, [pc, #376]	; (8002320 <HAL_RCC_OscConfig+0x4f8>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a5d      	ldr	r2, [pc, #372]	; (8002320 <HAL_RCC_OscConfig+0x4f8>)
 80021aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b0:	f7fe fd64 	bl	8000c7c <HAL_GetTick>
 80021b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80021b6:	e008      	b.n	80021ca <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80021b8:	f7fe fd60 	bl	8000c7c <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d901      	bls.n	80021ca <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	e255      	b.n	8002676 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80021ca:	4b55      	ldr	r3, [pc, #340]	; (8002320 <HAL_RCC_OscConfig+0x4f8>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d0f0      	beq.n	80021b8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80021d6:	f7fe fd5d 	bl	8000c94 <HAL_GetREVID>
 80021da:	4603      	mov	r3, r0
 80021dc:	f241 0203 	movw	r2, #4099	; 0x1003
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d817      	bhi.n	8002214 <HAL_RCC_OscConfig+0x3ec>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6a1b      	ldr	r3, [r3, #32]
 80021e8:	2b20      	cmp	r3, #32
 80021ea:	d108      	bne.n	80021fe <HAL_RCC_OscConfig+0x3d6>
 80021ec:	4b4c      	ldr	r3, [pc, #304]	; (8002320 <HAL_RCC_OscConfig+0x4f8>)
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80021f4:	4a4a      	ldr	r2, [pc, #296]	; (8002320 <HAL_RCC_OscConfig+0x4f8>)
 80021f6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80021fa:	6053      	str	r3, [r2, #4]
 80021fc:	e02e      	b.n	800225c <HAL_RCC_OscConfig+0x434>
 80021fe:	4b48      	ldr	r3, [pc, #288]	; (8002320 <HAL_RCC_OscConfig+0x4f8>)
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6a1b      	ldr	r3, [r3, #32]
 800220a:	069b      	lsls	r3, r3, #26
 800220c:	4944      	ldr	r1, [pc, #272]	; (8002320 <HAL_RCC_OscConfig+0x4f8>)
 800220e:	4313      	orrs	r3, r2
 8002210:	604b      	str	r3, [r1, #4]
 8002212:	e023      	b.n	800225c <HAL_RCC_OscConfig+0x434>
 8002214:	4b42      	ldr	r3, [pc, #264]	; (8002320 <HAL_RCC_OscConfig+0x4f8>)
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6a1b      	ldr	r3, [r3, #32]
 8002220:	061b      	lsls	r3, r3, #24
 8002222:	493f      	ldr	r1, [pc, #252]	; (8002320 <HAL_RCC_OscConfig+0x4f8>)
 8002224:	4313      	orrs	r3, r2
 8002226:	60cb      	str	r3, [r1, #12]
 8002228:	e018      	b.n	800225c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800222a:	4b3d      	ldr	r3, [pc, #244]	; (8002320 <HAL_RCC_OscConfig+0x4f8>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a3c      	ldr	r2, [pc, #240]	; (8002320 <HAL_RCC_OscConfig+0x4f8>)
 8002230:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002234:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002236:	f7fe fd21 	bl	8000c7c <HAL_GetTick>
 800223a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800223c:	e008      	b.n	8002250 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800223e:	f7fe fd1d 	bl	8000c7c <HAL_GetTick>
 8002242:	4602      	mov	r2, r0
 8002244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	2b02      	cmp	r3, #2
 800224a:	d901      	bls.n	8002250 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800224c:	2303      	movs	r3, #3
 800224e:	e212      	b.n	8002676 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002250:	4b33      	ldr	r3, [pc, #204]	; (8002320 <HAL_RCC_OscConfig+0x4f8>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002258:	2b00      	cmp	r3, #0
 800225a:	d1f0      	bne.n	800223e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 0308 	and.w	r3, r3, #8
 8002264:	2b00      	cmp	r3, #0
 8002266:	d036      	beq.n	80022d6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	695b      	ldr	r3, [r3, #20]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d019      	beq.n	80022a4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002270:	4b2b      	ldr	r3, [pc, #172]	; (8002320 <HAL_RCC_OscConfig+0x4f8>)
 8002272:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002274:	4a2a      	ldr	r2, [pc, #168]	; (8002320 <HAL_RCC_OscConfig+0x4f8>)
 8002276:	f043 0301 	orr.w	r3, r3, #1
 800227a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800227c:	f7fe fcfe 	bl	8000c7c <HAL_GetTick>
 8002280:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002282:	e008      	b.n	8002296 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002284:	f7fe fcfa 	bl	8000c7c <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	2b02      	cmp	r3, #2
 8002290:	d901      	bls.n	8002296 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e1ef      	b.n	8002676 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002296:	4b22      	ldr	r3, [pc, #136]	; (8002320 <HAL_RCC_OscConfig+0x4f8>)
 8002298:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800229a:	f003 0302 	and.w	r3, r3, #2
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d0f0      	beq.n	8002284 <HAL_RCC_OscConfig+0x45c>
 80022a2:	e018      	b.n	80022d6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022a4:	4b1e      	ldr	r3, [pc, #120]	; (8002320 <HAL_RCC_OscConfig+0x4f8>)
 80022a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022a8:	4a1d      	ldr	r2, [pc, #116]	; (8002320 <HAL_RCC_OscConfig+0x4f8>)
 80022aa:	f023 0301 	bic.w	r3, r3, #1
 80022ae:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022b0:	f7fe fce4 	bl	8000c7c <HAL_GetTick>
 80022b4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80022b6:	e008      	b.n	80022ca <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022b8:	f7fe fce0 	bl	8000c7c <HAL_GetTick>
 80022bc:	4602      	mov	r2, r0
 80022be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d901      	bls.n	80022ca <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80022c6:	2303      	movs	r3, #3
 80022c8:	e1d5      	b.n	8002676 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80022ca:	4b15      	ldr	r3, [pc, #84]	; (8002320 <HAL_RCC_OscConfig+0x4f8>)
 80022cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022ce:	f003 0302 	and.w	r3, r3, #2
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d1f0      	bne.n	80022b8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 0320 	and.w	r3, r3, #32
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d039      	beq.n	8002356 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	699b      	ldr	r3, [r3, #24]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d01c      	beq.n	8002324 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80022ea:	4b0d      	ldr	r3, [pc, #52]	; (8002320 <HAL_RCC_OscConfig+0x4f8>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a0c      	ldr	r2, [pc, #48]	; (8002320 <HAL_RCC_OscConfig+0x4f8>)
 80022f0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80022f4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80022f6:	f7fe fcc1 	bl	8000c7c <HAL_GetTick>
 80022fa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80022fc:	e008      	b.n	8002310 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80022fe:	f7fe fcbd 	bl	8000c7c <HAL_GetTick>
 8002302:	4602      	mov	r2, r0
 8002304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002306:	1ad3      	subs	r3, r2, r3
 8002308:	2b02      	cmp	r3, #2
 800230a:	d901      	bls.n	8002310 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800230c:	2303      	movs	r3, #3
 800230e:	e1b2      	b.n	8002676 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002310:	4b03      	ldr	r3, [pc, #12]	; (8002320 <HAL_RCC_OscConfig+0x4f8>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002318:	2b00      	cmp	r3, #0
 800231a:	d0f0      	beq.n	80022fe <HAL_RCC_OscConfig+0x4d6>
 800231c:	e01b      	b.n	8002356 <HAL_RCC_OscConfig+0x52e>
 800231e:	bf00      	nop
 8002320:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002324:	4b9b      	ldr	r3, [pc, #620]	; (8002594 <HAL_RCC_OscConfig+0x76c>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a9a      	ldr	r2, [pc, #616]	; (8002594 <HAL_RCC_OscConfig+0x76c>)
 800232a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800232e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002330:	f7fe fca4 	bl	8000c7c <HAL_GetTick>
 8002334:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002336:	e008      	b.n	800234a <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002338:	f7fe fca0 	bl	8000c7c <HAL_GetTick>
 800233c:	4602      	mov	r2, r0
 800233e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	2b02      	cmp	r3, #2
 8002344:	d901      	bls.n	800234a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	e195      	b.n	8002676 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800234a:	4b92      	ldr	r3, [pc, #584]	; (8002594 <HAL_RCC_OscConfig+0x76c>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d1f0      	bne.n	8002338 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0304 	and.w	r3, r3, #4
 800235e:	2b00      	cmp	r3, #0
 8002360:	f000 8081 	beq.w	8002466 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002364:	4b8c      	ldr	r3, [pc, #560]	; (8002598 <HAL_RCC_OscConfig+0x770>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a8b      	ldr	r2, [pc, #556]	; (8002598 <HAL_RCC_OscConfig+0x770>)
 800236a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800236e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002370:	f7fe fc84 	bl	8000c7c <HAL_GetTick>
 8002374:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002376:	e008      	b.n	800238a <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002378:	f7fe fc80 	bl	8000c7c <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	2b64      	cmp	r3, #100	; 0x64
 8002384:	d901      	bls.n	800238a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002386:	2303      	movs	r3, #3
 8002388:	e175      	b.n	8002676 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800238a:	4b83      	ldr	r3, [pc, #524]	; (8002598 <HAL_RCC_OscConfig+0x770>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002392:	2b00      	cmp	r3, #0
 8002394:	d0f0      	beq.n	8002378 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	2b01      	cmp	r3, #1
 800239c:	d106      	bne.n	80023ac <HAL_RCC_OscConfig+0x584>
 800239e:	4b7d      	ldr	r3, [pc, #500]	; (8002594 <HAL_RCC_OscConfig+0x76c>)
 80023a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023a2:	4a7c      	ldr	r2, [pc, #496]	; (8002594 <HAL_RCC_OscConfig+0x76c>)
 80023a4:	f043 0301 	orr.w	r3, r3, #1
 80023a8:	6713      	str	r3, [r2, #112]	; 0x70
 80023aa:	e02d      	b.n	8002408 <HAL_RCC_OscConfig+0x5e0>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d10c      	bne.n	80023ce <HAL_RCC_OscConfig+0x5a6>
 80023b4:	4b77      	ldr	r3, [pc, #476]	; (8002594 <HAL_RCC_OscConfig+0x76c>)
 80023b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023b8:	4a76      	ldr	r2, [pc, #472]	; (8002594 <HAL_RCC_OscConfig+0x76c>)
 80023ba:	f023 0301 	bic.w	r3, r3, #1
 80023be:	6713      	str	r3, [r2, #112]	; 0x70
 80023c0:	4b74      	ldr	r3, [pc, #464]	; (8002594 <HAL_RCC_OscConfig+0x76c>)
 80023c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023c4:	4a73      	ldr	r2, [pc, #460]	; (8002594 <HAL_RCC_OscConfig+0x76c>)
 80023c6:	f023 0304 	bic.w	r3, r3, #4
 80023ca:	6713      	str	r3, [r2, #112]	; 0x70
 80023cc:	e01c      	b.n	8002408 <HAL_RCC_OscConfig+0x5e0>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	2b05      	cmp	r3, #5
 80023d4:	d10c      	bne.n	80023f0 <HAL_RCC_OscConfig+0x5c8>
 80023d6:	4b6f      	ldr	r3, [pc, #444]	; (8002594 <HAL_RCC_OscConfig+0x76c>)
 80023d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023da:	4a6e      	ldr	r2, [pc, #440]	; (8002594 <HAL_RCC_OscConfig+0x76c>)
 80023dc:	f043 0304 	orr.w	r3, r3, #4
 80023e0:	6713      	str	r3, [r2, #112]	; 0x70
 80023e2:	4b6c      	ldr	r3, [pc, #432]	; (8002594 <HAL_RCC_OscConfig+0x76c>)
 80023e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023e6:	4a6b      	ldr	r2, [pc, #428]	; (8002594 <HAL_RCC_OscConfig+0x76c>)
 80023e8:	f043 0301 	orr.w	r3, r3, #1
 80023ec:	6713      	str	r3, [r2, #112]	; 0x70
 80023ee:	e00b      	b.n	8002408 <HAL_RCC_OscConfig+0x5e0>
 80023f0:	4b68      	ldr	r3, [pc, #416]	; (8002594 <HAL_RCC_OscConfig+0x76c>)
 80023f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023f4:	4a67      	ldr	r2, [pc, #412]	; (8002594 <HAL_RCC_OscConfig+0x76c>)
 80023f6:	f023 0301 	bic.w	r3, r3, #1
 80023fa:	6713      	str	r3, [r2, #112]	; 0x70
 80023fc:	4b65      	ldr	r3, [pc, #404]	; (8002594 <HAL_RCC_OscConfig+0x76c>)
 80023fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002400:	4a64      	ldr	r2, [pc, #400]	; (8002594 <HAL_RCC_OscConfig+0x76c>)
 8002402:	f023 0304 	bic.w	r3, r3, #4
 8002406:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d015      	beq.n	800243c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002410:	f7fe fc34 	bl	8000c7c <HAL_GetTick>
 8002414:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002416:	e00a      	b.n	800242e <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002418:	f7fe fc30 	bl	8000c7c <HAL_GetTick>
 800241c:	4602      	mov	r2, r0
 800241e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	f241 3288 	movw	r2, #5000	; 0x1388
 8002426:	4293      	cmp	r3, r2
 8002428:	d901      	bls.n	800242e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e123      	b.n	8002676 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800242e:	4b59      	ldr	r3, [pc, #356]	; (8002594 <HAL_RCC_OscConfig+0x76c>)
 8002430:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002432:	f003 0302 	and.w	r3, r3, #2
 8002436:	2b00      	cmp	r3, #0
 8002438:	d0ee      	beq.n	8002418 <HAL_RCC_OscConfig+0x5f0>
 800243a:	e014      	b.n	8002466 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800243c:	f7fe fc1e 	bl	8000c7c <HAL_GetTick>
 8002440:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002442:	e00a      	b.n	800245a <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002444:	f7fe fc1a 	bl	8000c7c <HAL_GetTick>
 8002448:	4602      	mov	r2, r0
 800244a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002452:	4293      	cmp	r3, r2
 8002454:	d901      	bls.n	800245a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	e10d      	b.n	8002676 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800245a:	4b4e      	ldr	r3, [pc, #312]	; (8002594 <HAL_RCC_OscConfig+0x76c>)
 800245c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800245e:	f003 0302 	and.w	r3, r3, #2
 8002462:	2b00      	cmp	r3, #0
 8002464:	d1ee      	bne.n	8002444 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800246a:	2b00      	cmp	r3, #0
 800246c:	f000 8102 	beq.w	8002674 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002470:	4b48      	ldr	r3, [pc, #288]	; (8002594 <HAL_RCC_OscConfig+0x76c>)
 8002472:	691b      	ldr	r3, [r3, #16]
 8002474:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002478:	2b18      	cmp	r3, #24
 800247a:	f000 80bd 	beq.w	80025f8 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002482:	2b02      	cmp	r3, #2
 8002484:	f040 809e 	bne.w	80025c4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002488:	4b42      	ldr	r3, [pc, #264]	; (8002594 <HAL_RCC_OscConfig+0x76c>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a41      	ldr	r2, [pc, #260]	; (8002594 <HAL_RCC_OscConfig+0x76c>)
 800248e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002492:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002494:	f7fe fbf2 	bl	8000c7c <HAL_GetTick>
 8002498:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800249a:	e008      	b.n	80024ae <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800249c:	f7fe fbee 	bl	8000c7c <HAL_GetTick>
 80024a0:	4602      	mov	r2, r0
 80024a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	d901      	bls.n	80024ae <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80024aa:	2303      	movs	r3, #3
 80024ac:	e0e3      	b.n	8002676 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80024ae:	4b39      	ldr	r3, [pc, #228]	; (8002594 <HAL_RCC_OscConfig+0x76c>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d1f0      	bne.n	800249c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024ba:	4b36      	ldr	r3, [pc, #216]	; (8002594 <HAL_RCC_OscConfig+0x76c>)
 80024bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80024be:	4b37      	ldr	r3, [pc, #220]	; (800259c <HAL_RCC_OscConfig+0x774>)
 80024c0:	4013      	ands	r3, r2
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80024ca:	0112      	lsls	r2, r2, #4
 80024cc:	430a      	orrs	r2, r1
 80024ce:	4931      	ldr	r1, [pc, #196]	; (8002594 <HAL_RCC_OscConfig+0x76c>)
 80024d0:	4313      	orrs	r3, r2
 80024d2:	628b      	str	r3, [r1, #40]	; 0x28
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d8:	3b01      	subs	r3, #1
 80024da:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024e2:	3b01      	subs	r3, #1
 80024e4:	025b      	lsls	r3, r3, #9
 80024e6:	b29b      	uxth	r3, r3
 80024e8:	431a      	orrs	r2, r3
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024ee:	3b01      	subs	r3, #1
 80024f0:	041b      	lsls	r3, r3, #16
 80024f2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80024f6:	431a      	orrs	r2, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024fc:	3b01      	subs	r3, #1
 80024fe:	061b      	lsls	r3, r3, #24
 8002500:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002504:	4923      	ldr	r1, [pc, #140]	; (8002594 <HAL_RCC_OscConfig+0x76c>)
 8002506:	4313      	orrs	r3, r2
 8002508:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800250a:	4b22      	ldr	r3, [pc, #136]	; (8002594 <HAL_RCC_OscConfig+0x76c>)
 800250c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800250e:	4a21      	ldr	r2, [pc, #132]	; (8002594 <HAL_RCC_OscConfig+0x76c>)
 8002510:	f023 0301 	bic.w	r3, r3, #1
 8002514:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002516:	4b1f      	ldr	r3, [pc, #124]	; (8002594 <HAL_RCC_OscConfig+0x76c>)
 8002518:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800251a:	4b21      	ldr	r3, [pc, #132]	; (80025a0 <HAL_RCC_OscConfig+0x778>)
 800251c:	4013      	ands	r3, r2
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002522:	00d2      	lsls	r2, r2, #3
 8002524:	491b      	ldr	r1, [pc, #108]	; (8002594 <HAL_RCC_OscConfig+0x76c>)
 8002526:	4313      	orrs	r3, r2
 8002528:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800252a:	4b1a      	ldr	r3, [pc, #104]	; (8002594 <HAL_RCC_OscConfig+0x76c>)
 800252c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800252e:	f023 020c 	bic.w	r2, r3, #12
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002536:	4917      	ldr	r1, [pc, #92]	; (8002594 <HAL_RCC_OscConfig+0x76c>)
 8002538:	4313      	orrs	r3, r2
 800253a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800253c:	4b15      	ldr	r3, [pc, #84]	; (8002594 <HAL_RCC_OscConfig+0x76c>)
 800253e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002540:	f023 0202 	bic.w	r2, r3, #2
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002548:	4912      	ldr	r1, [pc, #72]	; (8002594 <HAL_RCC_OscConfig+0x76c>)
 800254a:	4313      	orrs	r3, r2
 800254c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800254e:	4b11      	ldr	r3, [pc, #68]	; (8002594 <HAL_RCC_OscConfig+0x76c>)
 8002550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002552:	4a10      	ldr	r2, [pc, #64]	; (8002594 <HAL_RCC_OscConfig+0x76c>)
 8002554:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002558:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800255a:	4b0e      	ldr	r3, [pc, #56]	; (8002594 <HAL_RCC_OscConfig+0x76c>)
 800255c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800255e:	4a0d      	ldr	r2, [pc, #52]	; (8002594 <HAL_RCC_OscConfig+0x76c>)
 8002560:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002564:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002566:	4b0b      	ldr	r3, [pc, #44]	; (8002594 <HAL_RCC_OscConfig+0x76c>)
 8002568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800256a:	4a0a      	ldr	r2, [pc, #40]	; (8002594 <HAL_RCC_OscConfig+0x76c>)
 800256c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002570:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002572:	4b08      	ldr	r3, [pc, #32]	; (8002594 <HAL_RCC_OscConfig+0x76c>)
 8002574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002576:	4a07      	ldr	r2, [pc, #28]	; (8002594 <HAL_RCC_OscConfig+0x76c>)
 8002578:	f043 0301 	orr.w	r3, r3, #1
 800257c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800257e:	4b05      	ldr	r3, [pc, #20]	; (8002594 <HAL_RCC_OscConfig+0x76c>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a04      	ldr	r2, [pc, #16]	; (8002594 <HAL_RCC_OscConfig+0x76c>)
 8002584:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002588:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800258a:	f7fe fb77 	bl	8000c7c <HAL_GetTick>
 800258e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002590:	e011      	b.n	80025b6 <HAL_RCC_OscConfig+0x78e>
 8002592:	bf00      	nop
 8002594:	58024400 	.word	0x58024400
 8002598:	58024800 	.word	0x58024800
 800259c:	fffffc0c 	.word	0xfffffc0c
 80025a0:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025a4:	f7fe fb6a 	bl	8000c7c <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d901      	bls.n	80025b6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e05f      	b.n	8002676 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80025b6:	4b32      	ldr	r3, [pc, #200]	; (8002680 <HAL_RCC_OscConfig+0x858>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d0f0      	beq.n	80025a4 <HAL_RCC_OscConfig+0x77c>
 80025c2:	e057      	b.n	8002674 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025c4:	4b2e      	ldr	r3, [pc, #184]	; (8002680 <HAL_RCC_OscConfig+0x858>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a2d      	ldr	r2, [pc, #180]	; (8002680 <HAL_RCC_OscConfig+0x858>)
 80025ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025d0:	f7fe fb54 	bl	8000c7c <HAL_GetTick>
 80025d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80025d6:	e008      	b.n	80025ea <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025d8:	f7fe fb50 	bl	8000c7c <HAL_GetTick>
 80025dc:	4602      	mov	r2, r0
 80025de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d901      	bls.n	80025ea <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	e045      	b.n	8002676 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80025ea:	4b25      	ldr	r3, [pc, #148]	; (8002680 <HAL_RCC_OscConfig+0x858>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d1f0      	bne.n	80025d8 <HAL_RCC_OscConfig+0x7b0>
 80025f6:	e03d      	b.n	8002674 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80025f8:	4b21      	ldr	r3, [pc, #132]	; (8002680 <HAL_RCC_OscConfig+0x858>)
 80025fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025fc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80025fe:	4b20      	ldr	r3, [pc, #128]	; (8002680 <HAL_RCC_OscConfig+0x858>)
 8002600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002602:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002608:	2b01      	cmp	r3, #1
 800260a:	d031      	beq.n	8002670 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	f003 0203 	and.w	r2, r3, #3
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002616:	429a      	cmp	r2, r3
 8002618:	d12a      	bne.n	8002670 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	091b      	lsrs	r3, r3, #4
 800261e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002626:	429a      	cmp	r2, r3
 8002628:	d122      	bne.n	8002670 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002634:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002636:	429a      	cmp	r2, r3
 8002638:	d11a      	bne.n	8002670 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	0a5b      	lsrs	r3, r3, #9
 800263e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002646:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002648:	429a      	cmp	r2, r3
 800264a:	d111      	bne.n	8002670 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	0c1b      	lsrs	r3, r3, #16
 8002650:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002658:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800265a:	429a      	cmp	r2, r3
 800265c:	d108      	bne.n	8002670 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	0e1b      	lsrs	r3, r3, #24
 8002662:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800266a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800266c:	429a      	cmp	r2, r3
 800266e:	d001      	beq.n	8002674 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e000      	b.n	8002676 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8002674:	2300      	movs	r3, #0
}
 8002676:	4618      	mov	r0, r3
 8002678:	3730      	adds	r7, #48	; 0x30
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	58024400 	.word	0x58024400

08002684 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b086      	sub	sp, #24
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d101      	bne.n	8002698 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e19c      	b.n	80029d2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002698:	4b8a      	ldr	r3, [pc, #552]	; (80028c4 <HAL_RCC_ClockConfig+0x240>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 030f 	and.w	r3, r3, #15
 80026a0:	683a      	ldr	r2, [r7, #0]
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d910      	bls.n	80026c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026a6:	4b87      	ldr	r3, [pc, #540]	; (80028c4 <HAL_RCC_ClockConfig+0x240>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f023 020f 	bic.w	r2, r3, #15
 80026ae:	4985      	ldr	r1, [pc, #532]	; (80028c4 <HAL_RCC_ClockConfig+0x240>)
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026b6:	4b83      	ldr	r3, [pc, #524]	; (80028c4 <HAL_RCC_ClockConfig+0x240>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 030f 	and.w	r3, r3, #15
 80026be:	683a      	ldr	r2, [r7, #0]
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d001      	beq.n	80026c8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e184      	b.n	80029d2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0304 	and.w	r3, r3, #4
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d010      	beq.n	80026f6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	691a      	ldr	r2, [r3, #16]
 80026d8:	4b7b      	ldr	r3, [pc, #492]	; (80028c8 <HAL_RCC_ClockConfig+0x244>)
 80026da:	699b      	ldr	r3, [r3, #24]
 80026dc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d908      	bls.n	80026f6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80026e4:	4b78      	ldr	r3, [pc, #480]	; (80028c8 <HAL_RCC_ClockConfig+0x244>)
 80026e6:	699b      	ldr	r3, [r3, #24]
 80026e8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	691b      	ldr	r3, [r3, #16]
 80026f0:	4975      	ldr	r1, [pc, #468]	; (80028c8 <HAL_RCC_ClockConfig+0x244>)
 80026f2:	4313      	orrs	r3, r2
 80026f4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0308 	and.w	r3, r3, #8
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d010      	beq.n	8002724 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	695a      	ldr	r2, [r3, #20]
 8002706:	4b70      	ldr	r3, [pc, #448]	; (80028c8 <HAL_RCC_ClockConfig+0x244>)
 8002708:	69db      	ldr	r3, [r3, #28]
 800270a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800270e:	429a      	cmp	r2, r3
 8002710:	d908      	bls.n	8002724 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002712:	4b6d      	ldr	r3, [pc, #436]	; (80028c8 <HAL_RCC_ClockConfig+0x244>)
 8002714:	69db      	ldr	r3, [r3, #28]
 8002716:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	695b      	ldr	r3, [r3, #20]
 800271e:	496a      	ldr	r1, [pc, #424]	; (80028c8 <HAL_RCC_ClockConfig+0x244>)
 8002720:	4313      	orrs	r3, r2
 8002722:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0310 	and.w	r3, r3, #16
 800272c:	2b00      	cmp	r3, #0
 800272e:	d010      	beq.n	8002752 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	699a      	ldr	r2, [r3, #24]
 8002734:	4b64      	ldr	r3, [pc, #400]	; (80028c8 <HAL_RCC_ClockConfig+0x244>)
 8002736:	69db      	ldr	r3, [r3, #28]
 8002738:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800273c:	429a      	cmp	r2, r3
 800273e:	d908      	bls.n	8002752 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002740:	4b61      	ldr	r3, [pc, #388]	; (80028c8 <HAL_RCC_ClockConfig+0x244>)
 8002742:	69db      	ldr	r3, [r3, #28]
 8002744:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	699b      	ldr	r3, [r3, #24]
 800274c:	495e      	ldr	r1, [pc, #376]	; (80028c8 <HAL_RCC_ClockConfig+0x244>)
 800274e:	4313      	orrs	r3, r2
 8002750:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0320 	and.w	r3, r3, #32
 800275a:	2b00      	cmp	r3, #0
 800275c:	d010      	beq.n	8002780 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	69da      	ldr	r2, [r3, #28]
 8002762:	4b59      	ldr	r3, [pc, #356]	; (80028c8 <HAL_RCC_ClockConfig+0x244>)
 8002764:	6a1b      	ldr	r3, [r3, #32]
 8002766:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800276a:	429a      	cmp	r2, r3
 800276c:	d908      	bls.n	8002780 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800276e:	4b56      	ldr	r3, [pc, #344]	; (80028c8 <HAL_RCC_ClockConfig+0x244>)
 8002770:	6a1b      	ldr	r3, [r3, #32]
 8002772:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	69db      	ldr	r3, [r3, #28]
 800277a:	4953      	ldr	r1, [pc, #332]	; (80028c8 <HAL_RCC_ClockConfig+0x244>)
 800277c:	4313      	orrs	r3, r2
 800277e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 0302 	and.w	r3, r3, #2
 8002788:	2b00      	cmp	r3, #0
 800278a:	d010      	beq.n	80027ae <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	68da      	ldr	r2, [r3, #12]
 8002790:	4b4d      	ldr	r3, [pc, #308]	; (80028c8 <HAL_RCC_ClockConfig+0x244>)
 8002792:	699b      	ldr	r3, [r3, #24]
 8002794:	f003 030f 	and.w	r3, r3, #15
 8002798:	429a      	cmp	r2, r3
 800279a:	d908      	bls.n	80027ae <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800279c:	4b4a      	ldr	r3, [pc, #296]	; (80028c8 <HAL_RCC_ClockConfig+0x244>)
 800279e:	699b      	ldr	r3, [r3, #24]
 80027a0:	f023 020f 	bic.w	r2, r3, #15
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	4947      	ldr	r1, [pc, #284]	; (80028c8 <HAL_RCC_ClockConfig+0x244>)
 80027aa:	4313      	orrs	r3, r2
 80027ac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0301 	and.w	r3, r3, #1
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d055      	beq.n	8002866 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80027ba:	4b43      	ldr	r3, [pc, #268]	; (80028c8 <HAL_RCC_ClockConfig+0x244>)
 80027bc:	699b      	ldr	r3, [r3, #24]
 80027be:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	4940      	ldr	r1, [pc, #256]	; (80028c8 <HAL_RCC_ClockConfig+0x244>)
 80027c8:	4313      	orrs	r3, r2
 80027ca:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d107      	bne.n	80027e4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80027d4:	4b3c      	ldr	r3, [pc, #240]	; (80028c8 <HAL_RCC_ClockConfig+0x244>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d121      	bne.n	8002824 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	e0f6      	b.n	80029d2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	2b03      	cmp	r3, #3
 80027ea:	d107      	bne.n	80027fc <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80027ec:	4b36      	ldr	r3, [pc, #216]	; (80028c8 <HAL_RCC_ClockConfig+0x244>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d115      	bne.n	8002824 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	e0ea      	b.n	80029d2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	2b01      	cmp	r3, #1
 8002802:	d107      	bne.n	8002814 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002804:	4b30      	ldr	r3, [pc, #192]	; (80028c8 <HAL_RCC_ClockConfig+0x244>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800280c:	2b00      	cmp	r3, #0
 800280e:	d109      	bne.n	8002824 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e0de      	b.n	80029d2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002814:	4b2c      	ldr	r3, [pc, #176]	; (80028c8 <HAL_RCC_ClockConfig+0x244>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 0304 	and.w	r3, r3, #4
 800281c:	2b00      	cmp	r3, #0
 800281e:	d101      	bne.n	8002824 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e0d6      	b.n	80029d2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002824:	4b28      	ldr	r3, [pc, #160]	; (80028c8 <HAL_RCC_ClockConfig+0x244>)
 8002826:	691b      	ldr	r3, [r3, #16]
 8002828:	f023 0207 	bic.w	r2, r3, #7
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	4925      	ldr	r1, [pc, #148]	; (80028c8 <HAL_RCC_ClockConfig+0x244>)
 8002832:	4313      	orrs	r3, r2
 8002834:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002836:	f7fe fa21 	bl	8000c7c <HAL_GetTick>
 800283a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800283c:	e00a      	b.n	8002854 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800283e:	f7fe fa1d 	bl	8000c7c <HAL_GetTick>
 8002842:	4602      	mov	r2, r0
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	1ad3      	subs	r3, r2, r3
 8002848:	f241 3288 	movw	r2, #5000	; 0x1388
 800284c:	4293      	cmp	r3, r2
 800284e:	d901      	bls.n	8002854 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002850:	2303      	movs	r3, #3
 8002852:	e0be      	b.n	80029d2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002854:	4b1c      	ldr	r3, [pc, #112]	; (80028c8 <HAL_RCC_ClockConfig+0x244>)
 8002856:	691b      	ldr	r3, [r3, #16]
 8002858:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	00db      	lsls	r3, r3, #3
 8002862:	429a      	cmp	r2, r3
 8002864:	d1eb      	bne.n	800283e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0302 	and.w	r3, r3, #2
 800286e:	2b00      	cmp	r3, #0
 8002870:	d010      	beq.n	8002894 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	68da      	ldr	r2, [r3, #12]
 8002876:	4b14      	ldr	r3, [pc, #80]	; (80028c8 <HAL_RCC_ClockConfig+0x244>)
 8002878:	699b      	ldr	r3, [r3, #24]
 800287a:	f003 030f 	and.w	r3, r3, #15
 800287e:	429a      	cmp	r2, r3
 8002880:	d208      	bcs.n	8002894 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002882:	4b11      	ldr	r3, [pc, #68]	; (80028c8 <HAL_RCC_ClockConfig+0x244>)
 8002884:	699b      	ldr	r3, [r3, #24]
 8002886:	f023 020f 	bic.w	r2, r3, #15
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	68db      	ldr	r3, [r3, #12]
 800288e:	490e      	ldr	r1, [pc, #56]	; (80028c8 <HAL_RCC_ClockConfig+0x244>)
 8002890:	4313      	orrs	r3, r2
 8002892:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002894:	4b0b      	ldr	r3, [pc, #44]	; (80028c4 <HAL_RCC_ClockConfig+0x240>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 030f 	and.w	r3, r3, #15
 800289c:	683a      	ldr	r2, [r7, #0]
 800289e:	429a      	cmp	r2, r3
 80028a0:	d214      	bcs.n	80028cc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028a2:	4b08      	ldr	r3, [pc, #32]	; (80028c4 <HAL_RCC_ClockConfig+0x240>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f023 020f 	bic.w	r2, r3, #15
 80028aa:	4906      	ldr	r1, [pc, #24]	; (80028c4 <HAL_RCC_ClockConfig+0x240>)
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028b2:	4b04      	ldr	r3, [pc, #16]	; (80028c4 <HAL_RCC_ClockConfig+0x240>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 030f 	and.w	r3, r3, #15
 80028ba:	683a      	ldr	r2, [r7, #0]
 80028bc:	429a      	cmp	r2, r3
 80028be:	d005      	beq.n	80028cc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e086      	b.n	80029d2 <HAL_RCC_ClockConfig+0x34e>
 80028c4:	52002000 	.word	0x52002000
 80028c8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 0304 	and.w	r3, r3, #4
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d010      	beq.n	80028fa <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	691a      	ldr	r2, [r3, #16]
 80028dc:	4b3f      	ldr	r3, [pc, #252]	; (80029dc <HAL_RCC_ClockConfig+0x358>)
 80028de:	699b      	ldr	r3, [r3, #24]
 80028e0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d208      	bcs.n	80028fa <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80028e8:	4b3c      	ldr	r3, [pc, #240]	; (80029dc <HAL_RCC_ClockConfig+0x358>)
 80028ea:	699b      	ldr	r3, [r3, #24]
 80028ec:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	691b      	ldr	r3, [r3, #16]
 80028f4:	4939      	ldr	r1, [pc, #228]	; (80029dc <HAL_RCC_ClockConfig+0x358>)
 80028f6:	4313      	orrs	r3, r2
 80028f8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0308 	and.w	r3, r3, #8
 8002902:	2b00      	cmp	r3, #0
 8002904:	d010      	beq.n	8002928 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	695a      	ldr	r2, [r3, #20]
 800290a:	4b34      	ldr	r3, [pc, #208]	; (80029dc <HAL_RCC_ClockConfig+0x358>)
 800290c:	69db      	ldr	r3, [r3, #28]
 800290e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002912:	429a      	cmp	r2, r3
 8002914:	d208      	bcs.n	8002928 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002916:	4b31      	ldr	r3, [pc, #196]	; (80029dc <HAL_RCC_ClockConfig+0x358>)
 8002918:	69db      	ldr	r3, [r3, #28]
 800291a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	695b      	ldr	r3, [r3, #20]
 8002922:	492e      	ldr	r1, [pc, #184]	; (80029dc <HAL_RCC_ClockConfig+0x358>)
 8002924:	4313      	orrs	r3, r2
 8002926:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0310 	and.w	r3, r3, #16
 8002930:	2b00      	cmp	r3, #0
 8002932:	d010      	beq.n	8002956 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	699a      	ldr	r2, [r3, #24]
 8002938:	4b28      	ldr	r3, [pc, #160]	; (80029dc <HAL_RCC_ClockConfig+0x358>)
 800293a:	69db      	ldr	r3, [r3, #28]
 800293c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002940:	429a      	cmp	r2, r3
 8002942:	d208      	bcs.n	8002956 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002944:	4b25      	ldr	r3, [pc, #148]	; (80029dc <HAL_RCC_ClockConfig+0x358>)
 8002946:	69db      	ldr	r3, [r3, #28]
 8002948:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	699b      	ldr	r3, [r3, #24]
 8002950:	4922      	ldr	r1, [pc, #136]	; (80029dc <HAL_RCC_ClockConfig+0x358>)
 8002952:	4313      	orrs	r3, r2
 8002954:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0320 	and.w	r3, r3, #32
 800295e:	2b00      	cmp	r3, #0
 8002960:	d010      	beq.n	8002984 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	69da      	ldr	r2, [r3, #28]
 8002966:	4b1d      	ldr	r3, [pc, #116]	; (80029dc <HAL_RCC_ClockConfig+0x358>)
 8002968:	6a1b      	ldr	r3, [r3, #32]
 800296a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800296e:	429a      	cmp	r2, r3
 8002970:	d208      	bcs.n	8002984 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002972:	4b1a      	ldr	r3, [pc, #104]	; (80029dc <HAL_RCC_ClockConfig+0x358>)
 8002974:	6a1b      	ldr	r3, [r3, #32]
 8002976:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	69db      	ldr	r3, [r3, #28]
 800297e:	4917      	ldr	r1, [pc, #92]	; (80029dc <HAL_RCC_ClockConfig+0x358>)
 8002980:	4313      	orrs	r3, r2
 8002982:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002984:	f000 f834 	bl	80029f0 <HAL_RCC_GetSysClockFreq>
 8002988:	4602      	mov	r2, r0
 800298a:	4b14      	ldr	r3, [pc, #80]	; (80029dc <HAL_RCC_ClockConfig+0x358>)
 800298c:	699b      	ldr	r3, [r3, #24]
 800298e:	0a1b      	lsrs	r3, r3, #8
 8002990:	f003 030f 	and.w	r3, r3, #15
 8002994:	4912      	ldr	r1, [pc, #72]	; (80029e0 <HAL_RCC_ClockConfig+0x35c>)
 8002996:	5ccb      	ldrb	r3, [r1, r3]
 8002998:	f003 031f 	and.w	r3, r3, #31
 800299c:	fa22 f303 	lsr.w	r3, r2, r3
 80029a0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80029a2:	4b0e      	ldr	r3, [pc, #56]	; (80029dc <HAL_RCC_ClockConfig+0x358>)
 80029a4:	699b      	ldr	r3, [r3, #24]
 80029a6:	f003 030f 	and.w	r3, r3, #15
 80029aa:	4a0d      	ldr	r2, [pc, #52]	; (80029e0 <HAL_RCC_ClockConfig+0x35c>)
 80029ac:	5cd3      	ldrb	r3, [r2, r3]
 80029ae:	f003 031f 	and.w	r3, r3, #31
 80029b2:	693a      	ldr	r2, [r7, #16]
 80029b4:	fa22 f303 	lsr.w	r3, r2, r3
 80029b8:	4a0a      	ldr	r2, [pc, #40]	; (80029e4 <HAL_RCC_ClockConfig+0x360>)
 80029ba:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80029bc:	4a0a      	ldr	r2, [pc, #40]	; (80029e8 <HAL_RCC_ClockConfig+0x364>)
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80029c2:	4b0a      	ldr	r3, [pc, #40]	; (80029ec <HAL_RCC_ClockConfig+0x368>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4618      	mov	r0, r3
 80029c8:	f7fe f90e 	bl	8000be8 <HAL_InitTick>
 80029cc:	4603      	mov	r3, r0
 80029ce:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80029d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3718      	adds	r7, #24
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	58024400 	.word	0x58024400
 80029e0:	08003f10 	.word	0x08003f10
 80029e4:	24000004 	.word	0x24000004
 80029e8:	24000000 	.word	0x24000000
 80029ec:	24000008 	.word	0x24000008

080029f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b089      	sub	sp, #36	; 0x24
 80029f4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029f6:	4bb3      	ldr	r3, [pc, #716]	; (8002cc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029f8:	691b      	ldr	r3, [r3, #16]
 80029fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80029fe:	2b18      	cmp	r3, #24
 8002a00:	f200 8155 	bhi.w	8002cae <HAL_RCC_GetSysClockFreq+0x2be>
 8002a04:	a201      	add	r2, pc, #4	; (adr r2, 8002a0c <HAL_RCC_GetSysClockFreq+0x1c>)
 8002a06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a0a:	bf00      	nop
 8002a0c:	08002a71 	.word	0x08002a71
 8002a10:	08002caf 	.word	0x08002caf
 8002a14:	08002caf 	.word	0x08002caf
 8002a18:	08002caf 	.word	0x08002caf
 8002a1c:	08002caf 	.word	0x08002caf
 8002a20:	08002caf 	.word	0x08002caf
 8002a24:	08002caf 	.word	0x08002caf
 8002a28:	08002caf 	.word	0x08002caf
 8002a2c:	08002a97 	.word	0x08002a97
 8002a30:	08002caf 	.word	0x08002caf
 8002a34:	08002caf 	.word	0x08002caf
 8002a38:	08002caf 	.word	0x08002caf
 8002a3c:	08002caf 	.word	0x08002caf
 8002a40:	08002caf 	.word	0x08002caf
 8002a44:	08002caf 	.word	0x08002caf
 8002a48:	08002caf 	.word	0x08002caf
 8002a4c:	08002a9d 	.word	0x08002a9d
 8002a50:	08002caf 	.word	0x08002caf
 8002a54:	08002caf 	.word	0x08002caf
 8002a58:	08002caf 	.word	0x08002caf
 8002a5c:	08002caf 	.word	0x08002caf
 8002a60:	08002caf 	.word	0x08002caf
 8002a64:	08002caf 	.word	0x08002caf
 8002a68:	08002caf 	.word	0x08002caf
 8002a6c:	08002aa3 	.word	0x08002aa3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002a70:	4b94      	ldr	r3, [pc, #592]	; (8002cc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 0320 	and.w	r3, r3, #32
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d009      	beq.n	8002a90 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002a7c:	4b91      	ldr	r3, [pc, #580]	; (8002cc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	08db      	lsrs	r3, r3, #3
 8002a82:	f003 0303 	and.w	r3, r3, #3
 8002a86:	4a90      	ldr	r2, [pc, #576]	; (8002cc8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002a88:	fa22 f303 	lsr.w	r3, r2, r3
 8002a8c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8002a8e:	e111      	b.n	8002cb4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002a90:	4b8d      	ldr	r3, [pc, #564]	; (8002cc8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002a92:	61bb      	str	r3, [r7, #24]
    break;
 8002a94:	e10e      	b.n	8002cb4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002a96:	4b8d      	ldr	r3, [pc, #564]	; (8002ccc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002a98:	61bb      	str	r3, [r7, #24]
    break;
 8002a9a:	e10b      	b.n	8002cb4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002a9c:	4b8c      	ldr	r3, [pc, #560]	; (8002cd0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002a9e:	61bb      	str	r3, [r7, #24]
    break;
 8002aa0:	e108      	b.n	8002cb4 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002aa2:	4b88      	ldr	r3, [pc, #544]	; (8002cc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aa6:	f003 0303 	and.w	r3, r3, #3
 8002aaa:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002aac:	4b85      	ldr	r3, [pc, #532]	; (8002cc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ab0:	091b      	lsrs	r3, r3, #4
 8002ab2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ab6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002ab8:	4b82      	ldr	r3, [pc, #520]	; (8002cc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002abc:	f003 0301 	and.w	r3, r3, #1
 8002ac0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002ac2:	4b80      	ldr	r3, [pc, #512]	; (8002cc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ac4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ac6:	08db      	lsrs	r3, r3, #3
 8002ac8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002acc:	68fa      	ldr	r2, [r7, #12]
 8002ace:	fb02 f303 	mul.w	r3, r2, r3
 8002ad2:	ee07 3a90 	vmov	s15, r3
 8002ad6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ada:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	f000 80e1 	beq.w	8002ca8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	f000 8083 	beq.w	8002bf4 <HAL_RCC_GetSysClockFreq+0x204>
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	f200 80a1 	bhi.w	8002c38 <HAL_RCC_GetSysClockFreq+0x248>
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d003      	beq.n	8002b04 <HAL_RCC_GetSysClockFreq+0x114>
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d056      	beq.n	8002bb0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002b02:	e099      	b.n	8002c38 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002b04:	4b6f      	ldr	r3, [pc, #444]	; (8002cc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 0320 	and.w	r3, r3, #32
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d02d      	beq.n	8002b6c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002b10:	4b6c      	ldr	r3, [pc, #432]	; (8002cc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	08db      	lsrs	r3, r3, #3
 8002b16:	f003 0303 	and.w	r3, r3, #3
 8002b1a:	4a6b      	ldr	r2, [pc, #428]	; (8002cc8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002b1c:	fa22 f303 	lsr.w	r3, r2, r3
 8002b20:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	ee07 3a90 	vmov	s15, r3
 8002b28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	ee07 3a90 	vmov	s15, r3
 8002b32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b3a:	4b62      	ldr	r3, [pc, #392]	; (8002cc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b42:	ee07 3a90 	vmov	s15, r3
 8002b46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b4a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002b4e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002cd4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002b52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002b56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002b5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b66:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8002b6a:	e087      	b.n	8002c7c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	ee07 3a90 	vmov	s15, r3
 8002b72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b76:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002cd8 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002b7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b7e:	4b51      	ldr	r3, [pc, #324]	; (8002cc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b86:	ee07 3a90 	vmov	s15, r3
 8002b8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b8e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002b92:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002cd4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002b96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002b9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002ba2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ba6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002baa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002bae:	e065      	b.n	8002c7c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	ee07 3a90 	vmov	s15, r3
 8002bb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bba:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002cdc <HAL_RCC_GetSysClockFreq+0x2ec>
 8002bbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002bc2:	4b40      	ldr	r3, [pc, #256]	; (8002cc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bca:	ee07 3a90 	vmov	s15, r3
 8002bce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002bd2:	ed97 6a02 	vldr	s12, [r7, #8]
 8002bd6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002cd4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002bda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002bde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002be2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002be6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002bea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002bf2:	e043      	b.n	8002c7c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	ee07 3a90 	vmov	s15, r3
 8002bfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bfe:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002ce0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002c02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c06:	4b2f      	ldr	r3, [pc, #188]	; (8002cc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c0e:	ee07 3a90 	vmov	s15, r3
 8002c12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c16:	ed97 6a02 	vldr	s12, [r7, #8]
 8002c1a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002cd4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002c1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002c22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002c26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002c2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002c2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002c36:	e021      	b.n	8002c7c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	ee07 3a90 	vmov	s15, r3
 8002c3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c42:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002cdc <HAL_RCC_GetSysClockFreq+0x2ec>
 8002c46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c4a:	4b1e      	ldr	r3, [pc, #120]	; (8002cc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c52:	ee07 3a90 	vmov	s15, r3
 8002c56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c5a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002c5e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002cd4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002c62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002c66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002c6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002c6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002c72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002c7a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002c7c:	4b11      	ldr	r3, [pc, #68]	; (8002cc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c80:	0a5b      	lsrs	r3, r3, #9
 8002c82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c86:	3301      	adds	r3, #1
 8002c88:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	ee07 3a90 	vmov	s15, r3
 8002c90:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002c94:	edd7 6a07 	vldr	s13, [r7, #28]
 8002c98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ca0:	ee17 3a90 	vmov	r3, s15
 8002ca4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8002ca6:	e005      	b.n	8002cb4 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	61bb      	str	r3, [r7, #24]
    break;
 8002cac:	e002      	b.n	8002cb4 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8002cae:	4b07      	ldr	r3, [pc, #28]	; (8002ccc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002cb0:	61bb      	str	r3, [r7, #24]
    break;
 8002cb2:	bf00      	nop
  }

  return sysclockfreq;
 8002cb4:	69bb      	ldr	r3, [r7, #24]
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3724      	adds	r7, #36	; 0x24
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr
 8002cc2:	bf00      	nop
 8002cc4:	58024400 	.word	0x58024400
 8002cc8:	03d09000 	.word	0x03d09000
 8002ccc:	003d0900 	.word	0x003d0900
 8002cd0:	017d7840 	.word	0x017d7840
 8002cd4:	46000000 	.word	0x46000000
 8002cd8:	4c742400 	.word	0x4c742400
 8002cdc:	4a742400 	.word	0x4a742400
 8002ce0:	4bbebc20 	.word	0x4bbebc20

08002ce4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b086      	sub	sp, #24
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002cec:	2300      	movs	r3, #0
 8002cee:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d03f      	beq.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d04:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002d08:	d02a      	beq.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002d0a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002d0e:	d824      	bhi.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002d10:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002d14:	d018      	beq.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002d16:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002d1a:	d81e      	bhi.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d003      	beq.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002d20:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d24:	d007      	beq.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002d26:	e018      	b.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d28:	4ba3      	ldr	r3, [pc, #652]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d2c:	4aa2      	ldr	r2, [pc, #648]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002d2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d32:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002d34:	e015      	b.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	3304      	adds	r3, #4
 8002d3a:	2102      	movs	r1, #2
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f000 ff17 	bl	8003b70 <RCCEx_PLL2_Config>
 8002d42:	4603      	mov	r3, r0
 8002d44:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002d46:	e00c      	b.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	3324      	adds	r3, #36	; 0x24
 8002d4c:	2102      	movs	r1, #2
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f000 ffc0 	bl	8003cd4 <RCCEx_PLL3_Config>
 8002d54:	4603      	mov	r3, r0
 8002d56:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002d58:	e003      	b.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	75fb      	strb	r3, [r7, #23]
      break;
 8002d5e:	e000      	b.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002d60:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d62:	7dfb      	ldrb	r3, [r7, #23]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d109      	bne.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002d68:	4b93      	ldr	r3, [pc, #588]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002d6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d6c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d74:	4990      	ldr	r1, [pc, #576]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002d76:	4313      	orrs	r3, r2
 8002d78:	650b      	str	r3, [r1, #80]	; 0x50
 8002d7a:	e001      	b.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d7c:	7dfb      	ldrb	r3, [r7, #23]
 8002d7e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d03d      	beq.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d90:	2b04      	cmp	r3, #4
 8002d92:	d826      	bhi.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002d94:	a201      	add	r2, pc, #4	; (adr r2, 8002d9c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8002d96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d9a:	bf00      	nop
 8002d9c:	08002db1 	.word	0x08002db1
 8002da0:	08002dbf 	.word	0x08002dbf
 8002da4:	08002dd1 	.word	0x08002dd1
 8002da8:	08002de9 	.word	0x08002de9
 8002dac:	08002de9 	.word	0x08002de9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002db0:	4b81      	ldr	r3, [pc, #516]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002db4:	4a80      	ldr	r2, [pc, #512]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002db6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002dbc:	e015      	b.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	3304      	adds	r3, #4
 8002dc2:	2100      	movs	r1, #0
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f000 fed3 	bl	8003b70 <RCCEx_PLL2_Config>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002dce:	e00c      	b.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	3324      	adds	r3, #36	; 0x24
 8002dd4:	2100      	movs	r1, #0
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f000 ff7c 	bl	8003cd4 <RCCEx_PLL3_Config>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002de0:	e003      	b.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	75fb      	strb	r3, [r7, #23]
      break;
 8002de6:	e000      	b.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002de8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002dea:	7dfb      	ldrb	r3, [r7, #23]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d109      	bne.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002df0:	4b71      	ldr	r3, [pc, #452]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002df2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002df4:	f023 0207 	bic.w	r2, r3, #7
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dfc:	496e      	ldr	r1, [pc, #440]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	650b      	str	r3, [r1, #80]	; 0x50
 8002e02:	e001      	b.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e04:	7dfb      	ldrb	r3, [r7, #23]
 8002e06:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d042      	beq.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e1c:	d02b      	beq.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8002e1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e22:	d825      	bhi.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002e24:	2bc0      	cmp	r3, #192	; 0xc0
 8002e26:	d028      	beq.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002e28:	2bc0      	cmp	r3, #192	; 0xc0
 8002e2a:	d821      	bhi.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002e2c:	2b80      	cmp	r3, #128	; 0x80
 8002e2e:	d016      	beq.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8002e30:	2b80      	cmp	r3, #128	; 0x80
 8002e32:	d81d      	bhi.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d002      	beq.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8002e38:	2b40      	cmp	r3, #64	; 0x40
 8002e3a:	d007      	beq.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x168>
 8002e3c:	e018      	b.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e3e:	4b5e      	ldr	r3, [pc, #376]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e42:	4a5d      	ldr	r2, [pc, #372]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002e44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e48:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002e4a:	e017      	b.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	3304      	adds	r3, #4
 8002e50:	2100      	movs	r1, #0
 8002e52:	4618      	mov	r0, r3
 8002e54:	f000 fe8c 	bl	8003b70 <RCCEx_PLL2_Config>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002e5c:	e00e      	b.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	3324      	adds	r3, #36	; 0x24
 8002e62:	2100      	movs	r1, #0
 8002e64:	4618      	mov	r0, r3
 8002e66:	f000 ff35 	bl	8003cd4 <RCCEx_PLL3_Config>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002e6e:	e005      	b.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	75fb      	strb	r3, [r7, #23]
      break;
 8002e74:	e002      	b.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8002e76:	bf00      	nop
 8002e78:	e000      	b.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8002e7a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e7c:	7dfb      	ldrb	r3, [r7, #23]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d109      	bne.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002e82:	4b4d      	ldr	r3, [pc, #308]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002e84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e86:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e8e:	494a      	ldr	r1, [pc, #296]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002e90:	4313      	orrs	r3, r2
 8002e92:	650b      	str	r3, [r1, #80]	; 0x50
 8002e94:	e001      	b.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e96:	7dfb      	ldrb	r3, [r7, #23]
 8002e98:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d049      	beq.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002eac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002eb0:	d030      	beq.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8002eb2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002eb6:	d82a      	bhi.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002eb8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002ebc:	d02c      	beq.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8002ebe:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002ec2:	d824      	bhi.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002ec4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ec8:	d018      	beq.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x218>
 8002eca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ece:	d81e      	bhi.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d003      	beq.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002ed4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002ed8:	d007      	beq.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x206>
 8002eda:	e018      	b.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002edc:	4b36      	ldr	r3, [pc, #216]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee0:	4a35      	ldr	r2, [pc, #212]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002ee2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ee6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002ee8:	e017      	b.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	3304      	adds	r3, #4
 8002eee:	2100      	movs	r1, #0
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f000 fe3d 	bl	8003b70 <RCCEx_PLL2_Config>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002efa:	e00e      	b.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	3324      	adds	r3, #36	; 0x24
 8002f00:	2100      	movs	r1, #0
 8002f02:	4618      	mov	r0, r3
 8002f04:	f000 fee6 	bl	8003cd4 <RCCEx_PLL3_Config>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002f0c:	e005      	b.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	75fb      	strb	r3, [r7, #23]
      break;
 8002f12:	e002      	b.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002f14:	bf00      	nop
 8002f16:	e000      	b.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002f18:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f1a:	7dfb      	ldrb	r3, [r7, #23]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d10a      	bne.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002f20:	4b25      	ldr	r3, [pc, #148]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002f22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f24:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002f2e:	4922      	ldr	r1, [pc, #136]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002f30:	4313      	orrs	r3, r2
 8002f32:	658b      	str	r3, [r1, #88]	; 0x58
 8002f34:	e001      	b.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f36:	7dfb      	ldrb	r3, [r7, #23]
 8002f38:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d04b      	beq.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002f4c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f50:	d030      	beq.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8002f52:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f56:	d82a      	bhi.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002f58:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002f5c:	d02e      	beq.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8002f5e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002f62:	d824      	bhi.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002f64:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f68:	d018      	beq.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8002f6a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f6e:	d81e      	bhi.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d003      	beq.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8002f74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f78:	d007      	beq.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8002f7a:	e018      	b.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f7c:	4b0e      	ldr	r3, [pc, #56]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f80:	4a0d      	ldr	r2, [pc, #52]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002f82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f86:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002f88:	e019      	b.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	3304      	adds	r3, #4
 8002f8e:	2100      	movs	r1, #0
 8002f90:	4618      	mov	r0, r3
 8002f92:	f000 fded 	bl	8003b70 <RCCEx_PLL2_Config>
 8002f96:	4603      	mov	r3, r0
 8002f98:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002f9a:	e010      	b.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	3324      	adds	r3, #36	; 0x24
 8002fa0:	2100      	movs	r1, #0
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f000 fe96 	bl	8003cd4 <RCCEx_PLL3_Config>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002fac:	e007      	b.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	75fb      	strb	r3, [r7, #23]
      break;
 8002fb2:	e004      	b.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8002fb4:	bf00      	nop
 8002fb6:	e002      	b.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8002fb8:	58024400 	.word	0x58024400
      break;
 8002fbc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002fbe:	7dfb      	ldrb	r3, [r7, #23]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d10a      	bne.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002fc4:	4b99      	ldr	r3, [pc, #612]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002fc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fc8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002fd2:	4996      	ldr	r1, [pc, #600]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	658b      	str	r3, [r1, #88]	; 0x58
 8002fd8:	e001      	b.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fda:	7dfb      	ldrb	r3, [r7, #23]
 8002fdc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d032      	beq.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fee:	2b30      	cmp	r3, #48	; 0x30
 8002ff0:	d01c      	beq.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x348>
 8002ff2:	2b30      	cmp	r3, #48	; 0x30
 8002ff4:	d817      	bhi.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8002ff6:	2b20      	cmp	r3, #32
 8002ff8:	d00c      	beq.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8002ffa:	2b20      	cmp	r3, #32
 8002ffc:	d813      	bhi.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d016      	beq.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8003002:	2b10      	cmp	r3, #16
 8003004:	d10f      	bne.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003006:	4b89      	ldr	r3, [pc, #548]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800300a:	4a88      	ldr	r2, [pc, #544]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800300c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003010:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003012:	e00e      	b.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	3304      	adds	r3, #4
 8003018:	2102      	movs	r1, #2
 800301a:	4618      	mov	r0, r3
 800301c:	f000 fda8 	bl	8003b70 <RCCEx_PLL2_Config>
 8003020:	4603      	mov	r3, r0
 8003022:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003024:	e005      	b.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	75fb      	strb	r3, [r7, #23]
      break;
 800302a:	e002      	b.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800302c:	bf00      	nop
 800302e:	e000      	b.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8003030:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003032:	7dfb      	ldrb	r3, [r7, #23]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d109      	bne.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003038:	4b7c      	ldr	r3, [pc, #496]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800303a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800303c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003044:	4979      	ldr	r1, [pc, #484]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003046:	4313      	orrs	r3, r2
 8003048:	64cb      	str	r3, [r1, #76]	; 0x4c
 800304a:	e001      	b.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800304c:	7dfb      	ldrb	r3, [r7, #23]
 800304e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d047      	beq.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003060:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003064:	d030      	beq.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003066:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800306a:	d82a      	bhi.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800306c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003070:	d02c      	beq.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8003072:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003076:	d824      	bhi.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003078:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800307c:	d018      	beq.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800307e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003082:	d81e      	bhi.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003084:	2b00      	cmp	r3, #0
 8003086:	d003      	beq.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8003088:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800308c:	d007      	beq.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 800308e:	e018      	b.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003090:	4b66      	ldr	r3, [pc, #408]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003094:	4a65      	ldr	r2, [pc, #404]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003096:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800309a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800309c:	e017      	b.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	3304      	adds	r3, #4
 80030a2:	2100      	movs	r1, #0
 80030a4:	4618      	mov	r0, r3
 80030a6:	f000 fd63 	bl	8003b70 <RCCEx_PLL2_Config>
 80030aa:	4603      	mov	r3, r0
 80030ac:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80030ae:	e00e      	b.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	3324      	adds	r3, #36	; 0x24
 80030b4:	2100      	movs	r1, #0
 80030b6:	4618      	mov	r0, r3
 80030b8:	f000 fe0c 	bl	8003cd4 <RCCEx_PLL3_Config>
 80030bc:	4603      	mov	r3, r0
 80030be:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80030c0:	e005      	b.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	75fb      	strb	r3, [r7, #23]
      break;
 80030c6:	e002      	b.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80030c8:	bf00      	nop
 80030ca:	e000      	b.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80030cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030ce:	7dfb      	ldrb	r3, [r7, #23]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d109      	bne.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80030d4:	4b55      	ldr	r3, [pc, #340]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80030d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030d8:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030e0:	4952      	ldr	r1, [pc, #328]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80030e2:	4313      	orrs	r3, r2
 80030e4:	650b      	str	r3, [r1, #80]	; 0x50
 80030e6:	e001      	b.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030e8:	7dfb      	ldrb	r3, [r7, #23]
 80030ea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d049      	beq.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003100:	d02e      	beq.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003102:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003106:	d828      	bhi.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003108:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800310c:	d02a      	beq.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x480>
 800310e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003112:	d822      	bhi.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003114:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003118:	d026      	beq.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x484>
 800311a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800311e:	d81c      	bhi.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003120:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003124:	d010      	beq.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8003126:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800312a:	d816      	bhi.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x476>
 800312c:	2b00      	cmp	r3, #0
 800312e:	d01d      	beq.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x488>
 8003130:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003134:	d111      	bne.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	3304      	adds	r3, #4
 800313a:	2101      	movs	r1, #1
 800313c:	4618      	mov	r0, r3
 800313e:	f000 fd17 	bl	8003b70 <RCCEx_PLL2_Config>
 8003142:	4603      	mov	r3, r0
 8003144:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003146:	e012      	b.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	3324      	adds	r3, #36	; 0x24
 800314c:	2101      	movs	r1, #1
 800314e:	4618      	mov	r0, r3
 8003150:	f000 fdc0 	bl	8003cd4 <RCCEx_PLL3_Config>
 8003154:	4603      	mov	r3, r0
 8003156:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003158:	e009      	b.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	75fb      	strb	r3, [r7, #23]
      break;
 800315e:	e006      	b.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003160:	bf00      	nop
 8003162:	e004      	b.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003164:	bf00      	nop
 8003166:	e002      	b.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003168:	bf00      	nop
 800316a:	e000      	b.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800316c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800316e:	7dfb      	ldrb	r3, [r7, #23]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d109      	bne.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003174:	4b2d      	ldr	r3, [pc, #180]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003176:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003178:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003180:	492a      	ldr	r1, [pc, #168]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003182:	4313      	orrs	r3, r2
 8003184:	650b      	str	r3, [r1, #80]	; 0x50
 8003186:	e001      	b.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003188:	7dfb      	ldrb	r3, [r7, #23]
 800318a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003194:	2b00      	cmp	r3, #0
 8003196:	d04d      	beq.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800319e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80031a2:	d02e      	beq.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80031a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80031a8:	d828      	bhi.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x518>
 80031aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031ae:	d02a      	beq.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x522>
 80031b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031b4:	d822      	bhi.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x518>
 80031b6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80031ba:	d026      	beq.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x526>
 80031bc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80031c0:	d81c      	bhi.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x518>
 80031c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80031c6:	d010      	beq.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x506>
 80031c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80031cc:	d816      	bhi.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x518>
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d01d      	beq.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80031d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80031d6:	d111      	bne.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	3304      	adds	r3, #4
 80031dc:	2101      	movs	r1, #1
 80031de:	4618      	mov	r0, r3
 80031e0:	f000 fcc6 	bl	8003b70 <RCCEx_PLL2_Config>
 80031e4:	4603      	mov	r3, r0
 80031e6:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80031e8:	e012      	b.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	3324      	adds	r3, #36	; 0x24
 80031ee:	2101      	movs	r1, #1
 80031f0:	4618      	mov	r0, r3
 80031f2:	f000 fd6f 	bl	8003cd4 <RCCEx_PLL3_Config>
 80031f6:	4603      	mov	r3, r0
 80031f8:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80031fa:	e009      	b.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	75fb      	strb	r3, [r7, #23]
      break;
 8003200:	e006      	b.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003202:	bf00      	nop
 8003204:	e004      	b.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003206:	bf00      	nop
 8003208:	e002      	b.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800320a:	bf00      	nop
 800320c:	e000      	b.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800320e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003210:	7dfb      	ldrb	r3, [r7, #23]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d10c      	bne.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003216:	4b05      	ldr	r3, [pc, #20]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800321a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003224:	4901      	ldr	r1, [pc, #4]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003226:	4313      	orrs	r3, r2
 8003228:	658b      	str	r3, [r1, #88]	; 0x58
 800322a:	e003      	b.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x550>
 800322c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003230:	7dfb      	ldrb	r3, [r7, #23]
 8003232:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800323c:	2b00      	cmp	r3, #0
 800323e:	d02f      	beq.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003244:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003248:	d00e      	beq.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x584>
 800324a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800324e:	d814      	bhi.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x596>
 8003250:	2b00      	cmp	r3, #0
 8003252:	d015      	beq.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8003254:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003258:	d10f      	bne.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800325a:	4baf      	ldr	r3, [pc, #700]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800325c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800325e:	4aae      	ldr	r2, [pc, #696]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003260:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003264:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003266:	e00c      	b.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	3304      	adds	r3, #4
 800326c:	2101      	movs	r1, #1
 800326e:	4618      	mov	r0, r3
 8003270:	f000 fc7e 	bl	8003b70 <RCCEx_PLL2_Config>
 8003274:	4603      	mov	r3, r0
 8003276:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003278:	e003      	b.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	75fb      	strb	r3, [r7, #23]
      break;
 800327e:	e000      	b.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8003280:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003282:	7dfb      	ldrb	r3, [r7, #23]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d109      	bne.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003288:	4ba3      	ldr	r3, [pc, #652]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800328a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800328c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003294:	49a0      	ldr	r1, [pc, #640]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003296:	4313      	orrs	r3, r2
 8003298:	650b      	str	r3, [r1, #80]	; 0x50
 800329a:	e001      	b.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800329c:	7dfb      	ldrb	r3, [r7, #23]
 800329e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d032      	beq.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032b0:	2b03      	cmp	r3, #3
 80032b2:	d81b      	bhi.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x608>
 80032b4:	a201      	add	r2, pc, #4	; (adr r2, 80032bc <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 80032b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032ba:	bf00      	nop
 80032bc:	080032f3 	.word	0x080032f3
 80032c0:	080032cd 	.word	0x080032cd
 80032c4:	080032db 	.word	0x080032db
 80032c8:	080032f3 	.word	0x080032f3
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032cc:	4b92      	ldr	r3, [pc, #584]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80032ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d0:	4a91      	ldr	r2, [pc, #580]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80032d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032d6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80032d8:	e00c      	b.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	3304      	adds	r3, #4
 80032de:	2102      	movs	r1, #2
 80032e0:	4618      	mov	r0, r3
 80032e2:	f000 fc45 	bl	8003b70 <RCCEx_PLL2_Config>
 80032e6:	4603      	mov	r3, r0
 80032e8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80032ea:	e003      	b.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	75fb      	strb	r3, [r7, #23]
      break;
 80032f0:	e000      	b.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80032f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032f4:	7dfb      	ldrb	r3, [r7, #23]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d109      	bne.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80032fa:	4b87      	ldr	r3, [pc, #540]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80032fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032fe:	f023 0203 	bic.w	r2, r3, #3
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003306:	4984      	ldr	r1, [pc, #528]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003308:	4313      	orrs	r3, r2
 800330a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800330c:	e001      	b.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800330e:	7dfb      	ldrb	r3, [r7, #23]
 8003310:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800331a:	2b00      	cmp	r3, #0
 800331c:	f000 8086 	beq.w	800342c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003320:	4b7e      	ldr	r3, [pc, #504]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a7d      	ldr	r2, [pc, #500]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003326:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800332a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800332c:	f7fd fca6 	bl	8000c7c <HAL_GetTick>
 8003330:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003332:	e009      	b.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003334:	f7fd fca2 	bl	8000c7c <HAL_GetTick>
 8003338:	4602      	mov	r2, r0
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	2b64      	cmp	r3, #100	; 0x64
 8003340:	d902      	bls.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	75fb      	strb	r3, [r7, #23]
        break;
 8003346:	e005      	b.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003348:	4b74      	ldr	r3, [pc, #464]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003350:	2b00      	cmp	r3, #0
 8003352:	d0ef      	beq.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8003354:	7dfb      	ldrb	r3, [r7, #23]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d166      	bne.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800335a:	4b6f      	ldr	r3, [pc, #444]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800335c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003364:	4053      	eors	r3, r2
 8003366:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800336a:	2b00      	cmp	r3, #0
 800336c:	d013      	beq.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800336e:	4b6a      	ldr	r3, [pc, #424]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003372:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003376:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003378:	4b67      	ldr	r3, [pc, #412]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800337a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800337c:	4a66      	ldr	r2, [pc, #408]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800337e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003382:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003384:	4b64      	ldr	r3, [pc, #400]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003386:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003388:	4a63      	ldr	r2, [pc, #396]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800338a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800338e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003390:	4a61      	ldr	r2, [pc, #388]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800339c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033a0:	d115      	bne.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033a2:	f7fd fc6b 	bl	8000c7c <HAL_GetTick>
 80033a6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80033a8:	e00b      	b.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033aa:	f7fd fc67 	bl	8000c7c <HAL_GetTick>
 80033ae:	4602      	mov	r2, r0
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	1ad3      	subs	r3, r2, r3
 80033b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d902      	bls.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80033bc:	2303      	movs	r3, #3
 80033be:	75fb      	strb	r3, [r7, #23]
            break;
 80033c0:	e005      	b.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80033c2:	4b55      	ldr	r3, [pc, #340]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80033c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033c6:	f003 0302 	and.w	r3, r3, #2
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d0ed      	beq.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80033ce:	7dfb      	ldrb	r3, [r7, #23]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d126      	bne.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80033da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033e2:	d10d      	bne.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80033e4:	4b4c      	ldr	r3, [pc, #304]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80033e6:	691b      	ldr	r3, [r3, #16]
 80033e8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80033f2:	0919      	lsrs	r1, r3, #4
 80033f4:	4b4a      	ldr	r3, [pc, #296]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 80033f6:	400b      	ands	r3, r1
 80033f8:	4947      	ldr	r1, [pc, #284]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80033fa:	4313      	orrs	r3, r2
 80033fc:	610b      	str	r3, [r1, #16]
 80033fe:	e005      	b.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x728>
 8003400:	4b45      	ldr	r3, [pc, #276]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003402:	691b      	ldr	r3, [r3, #16]
 8003404:	4a44      	ldr	r2, [pc, #272]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003406:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800340a:	6113      	str	r3, [r2, #16]
 800340c:	4b42      	ldr	r3, [pc, #264]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800340e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003416:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800341a:	493f      	ldr	r1, [pc, #252]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800341c:	4313      	orrs	r3, r2
 800341e:	670b      	str	r3, [r1, #112]	; 0x70
 8003420:	e004      	b.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003422:	7dfb      	ldrb	r3, [r7, #23]
 8003424:	75bb      	strb	r3, [r7, #22]
 8003426:	e001      	b.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003428:	7dfb      	ldrb	r3, [r7, #23]
 800342a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0301 	and.w	r3, r3, #1
 8003434:	2b00      	cmp	r3, #0
 8003436:	f000 8085 	beq.w	8003544 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800343e:	2b28      	cmp	r3, #40	; 0x28
 8003440:	d866      	bhi.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8003442:	a201      	add	r2, pc, #4	; (adr r2, 8003448 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8003444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003448:	08003525 	.word	0x08003525
 800344c:	08003511 	.word	0x08003511
 8003450:	08003511 	.word	0x08003511
 8003454:	08003511 	.word	0x08003511
 8003458:	08003511 	.word	0x08003511
 800345c:	08003511 	.word	0x08003511
 8003460:	08003511 	.word	0x08003511
 8003464:	08003511 	.word	0x08003511
 8003468:	080034ed 	.word	0x080034ed
 800346c:	08003511 	.word	0x08003511
 8003470:	08003511 	.word	0x08003511
 8003474:	08003511 	.word	0x08003511
 8003478:	08003511 	.word	0x08003511
 800347c:	08003511 	.word	0x08003511
 8003480:	08003511 	.word	0x08003511
 8003484:	08003511 	.word	0x08003511
 8003488:	080034ff 	.word	0x080034ff
 800348c:	08003511 	.word	0x08003511
 8003490:	08003511 	.word	0x08003511
 8003494:	08003511 	.word	0x08003511
 8003498:	08003511 	.word	0x08003511
 800349c:	08003511 	.word	0x08003511
 80034a0:	08003511 	.word	0x08003511
 80034a4:	08003511 	.word	0x08003511
 80034a8:	08003525 	.word	0x08003525
 80034ac:	08003511 	.word	0x08003511
 80034b0:	08003511 	.word	0x08003511
 80034b4:	08003511 	.word	0x08003511
 80034b8:	08003511 	.word	0x08003511
 80034bc:	08003511 	.word	0x08003511
 80034c0:	08003511 	.word	0x08003511
 80034c4:	08003511 	.word	0x08003511
 80034c8:	08003525 	.word	0x08003525
 80034cc:	08003511 	.word	0x08003511
 80034d0:	08003511 	.word	0x08003511
 80034d4:	08003511 	.word	0x08003511
 80034d8:	08003511 	.word	0x08003511
 80034dc:	08003511 	.word	0x08003511
 80034e0:	08003511 	.word	0x08003511
 80034e4:	08003511 	.word	0x08003511
 80034e8:	08003525 	.word	0x08003525
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	3304      	adds	r3, #4
 80034f0:	2101      	movs	r1, #1
 80034f2:	4618      	mov	r0, r3
 80034f4:	f000 fb3c 	bl	8003b70 <RCCEx_PLL2_Config>
 80034f8:	4603      	mov	r3, r0
 80034fa:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80034fc:	e013      	b.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	3324      	adds	r3, #36	; 0x24
 8003502:	2101      	movs	r1, #1
 8003504:	4618      	mov	r0, r3
 8003506:	f000 fbe5 	bl	8003cd4 <RCCEx_PLL3_Config>
 800350a:	4603      	mov	r3, r0
 800350c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800350e:	e00a      	b.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	75fb      	strb	r3, [r7, #23]
      break;
 8003514:	e007      	b.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003516:	bf00      	nop
 8003518:	58024400 	.word	0x58024400
 800351c:	58024800 	.word	0x58024800
 8003520:	00ffffcf 	.word	0x00ffffcf
      break;
 8003524:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003526:	7dfb      	ldrb	r3, [r7, #23]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d109      	bne.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800352c:	4b96      	ldr	r3, [pc, #600]	; (8003788 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800352e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003530:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003538:	4993      	ldr	r1, [pc, #588]	; (8003788 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800353a:	4313      	orrs	r3, r2
 800353c:	654b      	str	r3, [r1, #84]	; 0x54
 800353e:	e001      	b.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003540:	7dfb      	ldrb	r3, [r7, #23]
 8003542:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0302 	and.w	r3, r3, #2
 800354c:	2b00      	cmp	r3, #0
 800354e:	d038      	beq.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003554:	2b05      	cmp	r3, #5
 8003556:	d821      	bhi.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8003558:	a201      	add	r2, pc, #4	; (adr r2, 8003560 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 800355a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800355e:	bf00      	nop
 8003560:	080035a3 	.word	0x080035a3
 8003564:	08003579 	.word	0x08003579
 8003568:	0800358b 	.word	0x0800358b
 800356c:	080035a3 	.word	0x080035a3
 8003570:	080035a3 	.word	0x080035a3
 8003574:	080035a3 	.word	0x080035a3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	3304      	adds	r3, #4
 800357c:	2101      	movs	r1, #1
 800357e:	4618      	mov	r0, r3
 8003580:	f000 faf6 	bl	8003b70 <RCCEx_PLL2_Config>
 8003584:	4603      	mov	r3, r0
 8003586:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003588:	e00c      	b.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	3324      	adds	r3, #36	; 0x24
 800358e:	2101      	movs	r1, #1
 8003590:	4618      	mov	r0, r3
 8003592:	f000 fb9f 	bl	8003cd4 <RCCEx_PLL3_Config>
 8003596:	4603      	mov	r3, r0
 8003598:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800359a:	e003      	b.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	75fb      	strb	r3, [r7, #23]
      break;
 80035a0:	e000      	b.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 80035a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035a4:	7dfb      	ldrb	r3, [r7, #23]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d109      	bne.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80035aa:	4b77      	ldr	r3, [pc, #476]	; (8003788 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80035ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035ae:	f023 0207 	bic.w	r2, r3, #7
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035b6:	4974      	ldr	r1, [pc, #464]	; (8003788 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80035b8:	4313      	orrs	r3, r2
 80035ba:	654b      	str	r3, [r1, #84]	; 0x54
 80035bc:	e001      	b.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035be:	7dfb      	ldrb	r3, [r7, #23]
 80035c0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 0304 	and.w	r3, r3, #4
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d03a      	beq.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035d4:	2b05      	cmp	r3, #5
 80035d6:	d821      	bhi.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x938>
 80035d8:	a201      	add	r2, pc, #4	; (adr r2, 80035e0 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 80035da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035de:	bf00      	nop
 80035e0:	08003623 	.word	0x08003623
 80035e4:	080035f9 	.word	0x080035f9
 80035e8:	0800360b 	.word	0x0800360b
 80035ec:	08003623 	.word	0x08003623
 80035f0:	08003623 	.word	0x08003623
 80035f4:	08003623 	.word	0x08003623
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	3304      	adds	r3, #4
 80035fc:	2101      	movs	r1, #1
 80035fe:	4618      	mov	r0, r3
 8003600:	f000 fab6 	bl	8003b70 <RCCEx_PLL2_Config>
 8003604:	4603      	mov	r3, r0
 8003606:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003608:	e00c      	b.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	3324      	adds	r3, #36	; 0x24
 800360e:	2101      	movs	r1, #1
 8003610:	4618      	mov	r0, r3
 8003612:	f000 fb5f 	bl	8003cd4 <RCCEx_PLL3_Config>
 8003616:	4603      	mov	r3, r0
 8003618:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800361a:	e003      	b.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	75fb      	strb	r3, [r7, #23]
      break;
 8003620:	e000      	b.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8003622:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003624:	7dfb      	ldrb	r3, [r7, #23]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d10a      	bne.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800362a:	4b57      	ldr	r3, [pc, #348]	; (8003788 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800362c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800362e:	f023 0207 	bic.w	r2, r3, #7
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003638:	4953      	ldr	r1, [pc, #332]	; (8003788 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800363a:	4313      	orrs	r3, r2
 800363c:	658b      	str	r3, [r1, #88]	; 0x58
 800363e:	e001      	b.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003640:	7dfb      	ldrb	r3, [r7, #23]
 8003642:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 0320 	and.w	r3, r3, #32
 800364c:	2b00      	cmp	r3, #0
 800364e:	d04b      	beq.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003656:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800365a:	d02e      	beq.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800365c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003660:	d828      	bhi.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003662:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003666:	d02a      	beq.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8003668:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800366c:	d822      	bhi.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800366e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003672:	d026      	beq.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8003674:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003678:	d81c      	bhi.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800367a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800367e:	d010      	beq.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8003680:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003684:	d816      	bhi.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003686:	2b00      	cmp	r3, #0
 8003688:	d01d      	beq.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 800368a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800368e:	d111      	bne.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	3304      	adds	r3, #4
 8003694:	2100      	movs	r1, #0
 8003696:	4618      	mov	r0, r3
 8003698:	f000 fa6a 	bl	8003b70 <RCCEx_PLL2_Config>
 800369c:	4603      	mov	r3, r0
 800369e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80036a0:	e012      	b.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	3324      	adds	r3, #36	; 0x24
 80036a6:	2102      	movs	r1, #2
 80036a8:	4618      	mov	r0, r3
 80036aa:	f000 fb13 	bl	8003cd4 <RCCEx_PLL3_Config>
 80036ae:	4603      	mov	r3, r0
 80036b0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80036b2:	e009      	b.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	75fb      	strb	r3, [r7, #23]
      break;
 80036b8:	e006      	b.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80036ba:	bf00      	nop
 80036bc:	e004      	b.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80036be:	bf00      	nop
 80036c0:	e002      	b.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80036c2:	bf00      	nop
 80036c4:	e000      	b.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80036c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036c8:	7dfb      	ldrb	r3, [r7, #23]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d10a      	bne.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80036ce:	4b2e      	ldr	r3, [pc, #184]	; (8003788 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80036d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036d2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036dc:	492a      	ldr	r1, [pc, #168]	; (8003788 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80036de:	4313      	orrs	r3, r2
 80036e0:	654b      	str	r3, [r1, #84]	; 0x54
 80036e2:	e001      	b.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036e4:	7dfb      	ldrb	r3, [r7, #23]
 80036e6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d04d      	beq.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80036fa:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80036fe:	d02e      	beq.n	800375e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8003700:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003704:	d828      	bhi.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003706:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800370a:	d02a      	beq.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800370c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003710:	d822      	bhi.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003712:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003716:	d026      	beq.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8003718:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800371c:	d81c      	bhi.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800371e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003722:	d010      	beq.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8003724:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003728:	d816      	bhi.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800372a:	2b00      	cmp	r3, #0
 800372c:	d01d      	beq.n	800376a <HAL_RCCEx_PeriphCLKConfig+0xa86>
 800372e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003732:	d111      	bne.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	3304      	adds	r3, #4
 8003738:	2100      	movs	r1, #0
 800373a:	4618      	mov	r0, r3
 800373c:	f000 fa18 	bl	8003b70 <RCCEx_PLL2_Config>
 8003740:	4603      	mov	r3, r0
 8003742:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003744:	e012      	b.n	800376c <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	3324      	adds	r3, #36	; 0x24
 800374a:	2102      	movs	r1, #2
 800374c:	4618      	mov	r0, r3
 800374e:	f000 fac1 	bl	8003cd4 <RCCEx_PLL3_Config>
 8003752:	4603      	mov	r3, r0
 8003754:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003756:	e009      	b.n	800376c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	75fb      	strb	r3, [r7, #23]
      break;
 800375c:	e006      	b.n	800376c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800375e:	bf00      	nop
 8003760:	e004      	b.n	800376c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003762:	bf00      	nop
 8003764:	e002      	b.n	800376c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003766:	bf00      	nop
 8003768:	e000      	b.n	800376c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800376a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800376c:	7dfb      	ldrb	r3, [r7, #23]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d10c      	bne.n	800378c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003772:	4b05      	ldr	r3, [pc, #20]	; (8003788 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003774:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003776:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003780:	4901      	ldr	r1, [pc, #4]	; (8003788 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003782:	4313      	orrs	r3, r2
 8003784:	658b      	str	r3, [r1, #88]	; 0x58
 8003786:	e003      	b.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8003788:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800378c:	7dfb      	ldrb	r3, [r7, #23]
 800378e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003798:	2b00      	cmp	r3, #0
 800379a:	d04b      	beq.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80037a2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80037a6:	d02e      	beq.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80037a8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80037ac:	d828      	bhi.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80037ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037b2:	d02a      	beq.n	800380a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80037b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037b8:	d822      	bhi.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80037ba:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80037be:	d026      	beq.n	800380e <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 80037c0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80037c4:	d81c      	bhi.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80037c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80037ca:	d010      	beq.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 80037cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80037d0:	d816      	bhi.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d01d      	beq.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 80037d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037da:	d111      	bne.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	3304      	adds	r3, #4
 80037e0:	2100      	movs	r1, #0
 80037e2:	4618      	mov	r0, r3
 80037e4:	f000 f9c4 	bl	8003b70 <RCCEx_PLL2_Config>
 80037e8:	4603      	mov	r3, r0
 80037ea:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80037ec:	e012      	b.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	3324      	adds	r3, #36	; 0x24
 80037f2:	2102      	movs	r1, #2
 80037f4:	4618      	mov	r0, r3
 80037f6:	f000 fa6d 	bl	8003cd4 <RCCEx_PLL3_Config>
 80037fa:	4603      	mov	r3, r0
 80037fc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80037fe:	e009      	b.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	75fb      	strb	r3, [r7, #23]
      break;
 8003804:	e006      	b.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003806:	bf00      	nop
 8003808:	e004      	b.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800380a:	bf00      	nop
 800380c:	e002      	b.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800380e:	bf00      	nop
 8003810:	e000      	b.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003812:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003814:	7dfb      	ldrb	r3, [r7, #23]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d10a      	bne.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800381a:	4b9d      	ldr	r3, [pc, #628]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800381c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800381e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003828:	4999      	ldr	r1, [pc, #612]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800382a:	4313      	orrs	r3, r2
 800382c:	658b      	str	r3, [r1, #88]	; 0x58
 800382e:	e001      	b.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003830:	7dfb      	ldrb	r3, [r7, #23]
 8003832:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0308 	and.w	r3, r3, #8
 800383c:	2b00      	cmp	r3, #0
 800383e:	d01a      	beq.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003846:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800384a:	d10a      	bne.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	3324      	adds	r3, #36	; 0x24
 8003850:	2102      	movs	r1, #2
 8003852:	4618      	mov	r0, r3
 8003854:	f000 fa3e 	bl	8003cd4 <RCCEx_PLL3_Config>
 8003858:	4603      	mov	r3, r0
 800385a:	2b00      	cmp	r3, #0
 800385c:	d001      	beq.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003862:	4b8b      	ldr	r3, [pc, #556]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003864:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003866:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003870:	4987      	ldr	r1, [pc, #540]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003872:	4313      	orrs	r3, r2
 8003874:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 0310 	and.w	r3, r3, #16
 800387e:	2b00      	cmp	r3, #0
 8003880:	d01a      	beq.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003888:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800388c:	d10a      	bne.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	3324      	adds	r3, #36	; 0x24
 8003892:	2102      	movs	r1, #2
 8003894:	4618      	mov	r0, r3
 8003896:	f000 fa1d 	bl	8003cd4 <RCCEx_PLL3_Config>
 800389a:	4603      	mov	r3, r0
 800389c:	2b00      	cmp	r3, #0
 800389e:	d001      	beq.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80038a4:	4b7a      	ldr	r3, [pc, #488]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80038a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038b2:	4977      	ldr	r1, [pc, #476]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80038b4:	4313      	orrs	r3, r2
 80038b6:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d034      	beq.n	800392e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80038ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80038ce:	d01d      	beq.n	800390c <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80038d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80038d4:	d817      	bhi.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d003      	beq.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80038da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038de:	d009      	beq.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 80038e0:	e011      	b.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	3304      	adds	r3, #4
 80038e6:	2100      	movs	r1, #0
 80038e8:	4618      	mov	r0, r3
 80038ea:	f000 f941 	bl	8003b70 <RCCEx_PLL2_Config>
 80038ee:	4603      	mov	r3, r0
 80038f0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80038f2:	e00c      	b.n	800390e <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	3324      	adds	r3, #36	; 0x24
 80038f8:	2102      	movs	r1, #2
 80038fa:	4618      	mov	r0, r3
 80038fc:	f000 f9ea 	bl	8003cd4 <RCCEx_PLL3_Config>
 8003900:	4603      	mov	r3, r0
 8003902:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003904:	e003      	b.n	800390e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	75fb      	strb	r3, [r7, #23]
      break;
 800390a:	e000      	b.n	800390e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 800390c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800390e:	7dfb      	ldrb	r3, [r7, #23]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d10a      	bne.n	800392a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003914:	4b5e      	ldr	r3, [pc, #376]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003916:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003918:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003922:	495b      	ldr	r1, [pc, #364]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003924:	4313      	orrs	r3, r2
 8003926:	658b      	str	r3, [r1, #88]	; 0x58
 8003928:	e001      	b.n	800392e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800392a:	7dfb      	ldrb	r3, [r7, #23]
 800392c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d033      	beq.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003940:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003944:	d01c      	beq.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8003946:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800394a:	d816      	bhi.n	800397a <HAL_RCCEx_PeriphCLKConfig+0xc96>
 800394c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003950:	d003      	beq.n	800395a <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8003952:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003956:	d007      	beq.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8003958:	e00f      	b.n	800397a <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800395a:	4b4d      	ldr	r3, [pc, #308]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800395c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800395e:	4a4c      	ldr	r2, [pc, #304]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003960:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003964:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8003966:	e00c      	b.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	3324      	adds	r3, #36	; 0x24
 800396c:	2101      	movs	r1, #1
 800396e:	4618      	mov	r0, r3
 8003970:	f000 f9b0 	bl	8003cd4 <RCCEx_PLL3_Config>
 8003974:	4603      	mov	r3, r0
 8003976:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8003978:	e003      	b.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	75fb      	strb	r3, [r7, #23]
      break;
 800397e:	e000      	b.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8003980:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003982:	7dfb      	ldrb	r3, [r7, #23]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d10a      	bne.n	800399e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003988:	4b41      	ldr	r3, [pc, #260]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800398a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800398c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003996:	493e      	ldr	r1, [pc, #248]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003998:	4313      	orrs	r3, r2
 800399a:	654b      	str	r3, [r1, #84]	; 0x54
 800399c:	e001      	b.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800399e:	7dfb      	ldrb	r3, [r7, #23]
 80039a0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d029      	beq.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d003      	beq.n	80039be <HAL_RCCEx_PeriphCLKConfig+0xcda>
 80039b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039ba:	d007      	beq.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0xce8>
 80039bc:	e00f      	b.n	80039de <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039be:	4b34      	ldr	r3, [pc, #208]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80039c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c2:	4a33      	ldr	r2, [pc, #204]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80039c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039c8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80039ca:	e00b      	b.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	3304      	adds	r3, #4
 80039d0:	2102      	movs	r1, #2
 80039d2:	4618      	mov	r0, r3
 80039d4:	f000 f8cc 	bl	8003b70 <RCCEx_PLL2_Config>
 80039d8:	4603      	mov	r3, r0
 80039da:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80039dc:	e002      	b.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	75fb      	strb	r3, [r7, #23]
      break;
 80039e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039e4:	7dfb      	ldrb	r3, [r7, #23]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d109      	bne.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80039ea:	4b29      	ldr	r3, [pc, #164]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80039ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039ee:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039f6:	4926      	ldr	r1, [pc, #152]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80039f8:	4313      	orrs	r3, r2
 80039fa:	64cb      	str	r3, [r1, #76]	; 0x4c
 80039fc:	e001      	b.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039fe:	7dfb      	ldrb	r3, [r7, #23]
 8003a00:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d00a      	beq.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	3324      	adds	r3, #36	; 0x24
 8003a12:	2102      	movs	r1, #2
 8003a14:	4618      	mov	r0, r3
 8003a16:	f000 f95d 	bl	8003cd4 <RCCEx_PLL3_Config>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d001      	beq.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d033      	beq.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a34:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a38:	d017      	beq.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8003a3a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a3e:	d811      	bhi.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8003a40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a44:	d013      	beq.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8003a46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a4a:	d80b      	bhi.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d010      	beq.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8003a50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a54:	d106      	bne.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a56:	4b0e      	ldr	r3, [pc, #56]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a5a:	4a0d      	ldr	r2, [pc, #52]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003a5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a60:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8003a62:	e007      	b.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	75fb      	strb	r3, [r7, #23]
      break;
 8003a68:	e004      	b.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8003a6a:	bf00      	nop
 8003a6c:	e002      	b.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8003a6e:	bf00      	nop
 8003a70:	e000      	b.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8003a72:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a74:	7dfb      	ldrb	r3, [r7, #23]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d10c      	bne.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003a7a:	4b05      	ldr	r3, [pc, #20]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003a7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a7e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a86:	4902      	ldr	r1, [pc, #8]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	654b      	str	r3, [r1, #84]	; 0x54
 8003a8c:	e004      	b.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8003a8e:	bf00      	nop
 8003a90:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a94:	7dfb      	ldrb	r3, [r7, #23]
 8003a96:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d008      	beq.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003aa4:	4b31      	ldr	r3, [pc, #196]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003aa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003aa8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ab0:	492e      	ldr	r1, [pc, #184]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d009      	beq.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003ac2:	4b2a      	ldr	r3, [pc, #168]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003ac4:	691b      	ldr	r3, [r3, #16]
 8003ac6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003ad0:	4926      	ldr	r1, [pc, #152]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d008      	beq.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003ae2:	4b22      	ldr	r3, [pc, #136]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003ae4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ae6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003aee:	491f      	ldr	r1, [pc, #124]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003af0:	4313      	orrs	r3, r2
 8003af2:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d00d      	beq.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003b00:	4b1a      	ldr	r3, [pc, #104]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003b02:	691b      	ldr	r3, [r3, #16]
 8003b04:	4a19      	ldr	r2, [pc, #100]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003b06:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003b0a:	6113      	str	r3, [r2, #16]
 8003b0c:	4b17      	ldr	r3, [pc, #92]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003b0e:	691a      	ldr	r2, [r3, #16]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003b16:	4915      	ldr	r1, [pc, #84]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	da08      	bge.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003b24:	4b11      	ldr	r3, [pc, #68]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003b26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b28:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b30:	490e      	ldr	r1, [pc, #56]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003b32:	4313      	orrs	r3, r2
 8003b34:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d009      	beq.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003b42:	4b0a      	ldr	r3, [pc, #40]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003b44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b46:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b50:	4906      	ldr	r1, [pc, #24]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003b52:	4313      	orrs	r3, r2
 8003b54:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8003b56:	7dbb      	ldrb	r3, [r7, #22]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d101      	bne.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	e000      	b.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3718      	adds	r7, #24
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	58024400 	.word	0x58024400

08003b70 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b084      	sub	sp, #16
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
 8003b78:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003b7e:	4b53      	ldr	r3, [pc, #332]	; (8003ccc <RCCEx_PLL2_Config+0x15c>)
 8003b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b82:	f003 0303 	and.w	r3, r3, #3
 8003b86:	2b03      	cmp	r3, #3
 8003b88:	d101      	bne.n	8003b8e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e099      	b.n	8003cc2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003b8e:	4b4f      	ldr	r3, [pc, #316]	; (8003ccc <RCCEx_PLL2_Config+0x15c>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a4e      	ldr	r2, [pc, #312]	; (8003ccc <RCCEx_PLL2_Config+0x15c>)
 8003b94:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003b98:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b9a:	f7fd f86f 	bl	8000c7c <HAL_GetTick>
 8003b9e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003ba0:	e008      	b.n	8003bb4 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003ba2:	f7fd f86b 	bl	8000c7c <HAL_GetTick>
 8003ba6:	4602      	mov	r2, r0
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	1ad3      	subs	r3, r2, r3
 8003bac:	2b02      	cmp	r3, #2
 8003bae:	d901      	bls.n	8003bb4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003bb0:	2303      	movs	r3, #3
 8003bb2:	e086      	b.n	8003cc2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003bb4:	4b45      	ldr	r3, [pc, #276]	; (8003ccc <RCCEx_PLL2_Config+0x15c>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d1f0      	bne.n	8003ba2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003bc0:	4b42      	ldr	r3, [pc, #264]	; (8003ccc <RCCEx_PLL2_Config+0x15c>)
 8003bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bc4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	031b      	lsls	r3, r3, #12
 8003bce:	493f      	ldr	r1, [pc, #252]	; (8003ccc <RCCEx_PLL2_Config+0x15c>)
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	628b      	str	r3, [r1, #40]	; 0x28
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	3b01      	subs	r3, #1
 8003bda:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	3b01      	subs	r3, #1
 8003be4:	025b      	lsls	r3, r3, #9
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	431a      	orrs	r2, r3
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	68db      	ldr	r3, [r3, #12]
 8003bee:	3b01      	subs	r3, #1
 8003bf0:	041b      	lsls	r3, r3, #16
 8003bf2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003bf6:	431a      	orrs	r2, r3
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	691b      	ldr	r3, [r3, #16]
 8003bfc:	3b01      	subs	r3, #1
 8003bfe:	061b      	lsls	r3, r3, #24
 8003c00:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003c04:	4931      	ldr	r1, [pc, #196]	; (8003ccc <RCCEx_PLL2_Config+0x15c>)
 8003c06:	4313      	orrs	r3, r2
 8003c08:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003c0a:	4b30      	ldr	r3, [pc, #192]	; (8003ccc <RCCEx_PLL2_Config+0x15c>)
 8003c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c0e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	695b      	ldr	r3, [r3, #20]
 8003c16:	492d      	ldr	r1, [pc, #180]	; (8003ccc <RCCEx_PLL2_Config+0x15c>)
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003c1c:	4b2b      	ldr	r3, [pc, #172]	; (8003ccc <RCCEx_PLL2_Config+0x15c>)
 8003c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c20:	f023 0220 	bic.w	r2, r3, #32
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	699b      	ldr	r3, [r3, #24]
 8003c28:	4928      	ldr	r1, [pc, #160]	; (8003ccc <RCCEx_PLL2_Config+0x15c>)
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003c2e:	4b27      	ldr	r3, [pc, #156]	; (8003ccc <RCCEx_PLL2_Config+0x15c>)
 8003c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c32:	4a26      	ldr	r2, [pc, #152]	; (8003ccc <RCCEx_PLL2_Config+0x15c>)
 8003c34:	f023 0310 	bic.w	r3, r3, #16
 8003c38:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003c3a:	4b24      	ldr	r3, [pc, #144]	; (8003ccc <RCCEx_PLL2_Config+0x15c>)
 8003c3c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c3e:	4b24      	ldr	r3, [pc, #144]	; (8003cd0 <RCCEx_PLL2_Config+0x160>)
 8003c40:	4013      	ands	r3, r2
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	69d2      	ldr	r2, [r2, #28]
 8003c46:	00d2      	lsls	r2, r2, #3
 8003c48:	4920      	ldr	r1, [pc, #128]	; (8003ccc <RCCEx_PLL2_Config+0x15c>)
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003c4e:	4b1f      	ldr	r3, [pc, #124]	; (8003ccc <RCCEx_PLL2_Config+0x15c>)
 8003c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c52:	4a1e      	ldr	r2, [pc, #120]	; (8003ccc <RCCEx_PLL2_Config+0x15c>)
 8003c54:	f043 0310 	orr.w	r3, r3, #16
 8003c58:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d106      	bne.n	8003c6e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003c60:	4b1a      	ldr	r3, [pc, #104]	; (8003ccc <RCCEx_PLL2_Config+0x15c>)
 8003c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c64:	4a19      	ldr	r2, [pc, #100]	; (8003ccc <RCCEx_PLL2_Config+0x15c>)
 8003c66:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003c6a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003c6c:	e00f      	b.n	8003c8e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d106      	bne.n	8003c82 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003c74:	4b15      	ldr	r3, [pc, #84]	; (8003ccc <RCCEx_PLL2_Config+0x15c>)
 8003c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c78:	4a14      	ldr	r2, [pc, #80]	; (8003ccc <RCCEx_PLL2_Config+0x15c>)
 8003c7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c7e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003c80:	e005      	b.n	8003c8e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003c82:	4b12      	ldr	r3, [pc, #72]	; (8003ccc <RCCEx_PLL2_Config+0x15c>)
 8003c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c86:	4a11      	ldr	r2, [pc, #68]	; (8003ccc <RCCEx_PLL2_Config+0x15c>)
 8003c88:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003c8c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003c8e:	4b0f      	ldr	r3, [pc, #60]	; (8003ccc <RCCEx_PLL2_Config+0x15c>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a0e      	ldr	r2, [pc, #56]	; (8003ccc <RCCEx_PLL2_Config+0x15c>)
 8003c94:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003c98:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c9a:	f7fc ffef 	bl	8000c7c <HAL_GetTick>
 8003c9e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003ca0:	e008      	b.n	8003cb4 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003ca2:	f7fc ffeb 	bl	8000c7c <HAL_GetTick>
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	1ad3      	subs	r3, r2, r3
 8003cac:	2b02      	cmp	r3, #2
 8003cae:	d901      	bls.n	8003cb4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003cb0:	2303      	movs	r3, #3
 8003cb2:	e006      	b.n	8003cc2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003cb4:	4b05      	ldr	r3, [pc, #20]	; (8003ccc <RCCEx_PLL2_Config+0x15c>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d0f0      	beq.n	8003ca2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003cc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3710      	adds	r7, #16
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}
 8003cca:	bf00      	nop
 8003ccc:	58024400 	.word	0x58024400
 8003cd0:	ffff0007 	.word	0xffff0007

08003cd4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b084      	sub	sp, #16
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
 8003cdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003ce2:	4b53      	ldr	r3, [pc, #332]	; (8003e30 <RCCEx_PLL3_Config+0x15c>)
 8003ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ce6:	f003 0303 	and.w	r3, r3, #3
 8003cea:	2b03      	cmp	r3, #3
 8003cec:	d101      	bne.n	8003cf2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e099      	b.n	8003e26 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003cf2:	4b4f      	ldr	r3, [pc, #316]	; (8003e30 <RCCEx_PLL3_Config+0x15c>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a4e      	ldr	r2, [pc, #312]	; (8003e30 <RCCEx_PLL3_Config+0x15c>)
 8003cf8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cfc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cfe:	f7fc ffbd 	bl	8000c7c <HAL_GetTick>
 8003d02:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003d04:	e008      	b.n	8003d18 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003d06:	f7fc ffb9 	bl	8000c7c <HAL_GetTick>
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	1ad3      	subs	r3, r2, r3
 8003d10:	2b02      	cmp	r3, #2
 8003d12:	d901      	bls.n	8003d18 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003d14:	2303      	movs	r3, #3
 8003d16:	e086      	b.n	8003e26 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003d18:	4b45      	ldr	r3, [pc, #276]	; (8003e30 <RCCEx_PLL3_Config+0x15c>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d1f0      	bne.n	8003d06 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003d24:	4b42      	ldr	r3, [pc, #264]	; (8003e30 <RCCEx_PLL3_Config+0x15c>)
 8003d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d28:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	051b      	lsls	r3, r3, #20
 8003d32:	493f      	ldr	r1, [pc, #252]	; (8003e30 <RCCEx_PLL3_Config+0x15c>)
 8003d34:	4313      	orrs	r3, r2
 8003d36:	628b      	str	r3, [r1, #40]	; 0x28
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	3b01      	subs	r3, #1
 8003d3e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	3b01      	subs	r3, #1
 8003d48:	025b      	lsls	r3, r3, #9
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	431a      	orrs	r2, r3
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	68db      	ldr	r3, [r3, #12]
 8003d52:	3b01      	subs	r3, #1
 8003d54:	041b      	lsls	r3, r3, #16
 8003d56:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003d5a:	431a      	orrs	r2, r3
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	691b      	ldr	r3, [r3, #16]
 8003d60:	3b01      	subs	r3, #1
 8003d62:	061b      	lsls	r3, r3, #24
 8003d64:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003d68:	4931      	ldr	r1, [pc, #196]	; (8003e30 <RCCEx_PLL3_Config+0x15c>)
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003d6e:	4b30      	ldr	r3, [pc, #192]	; (8003e30 <RCCEx_PLL3_Config+0x15c>)
 8003d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d72:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	695b      	ldr	r3, [r3, #20]
 8003d7a:	492d      	ldr	r1, [pc, #180]	; (8003e30 <RCCEx_PLL3_Config+0x15c>)
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003d80:	4b2b      	ldr	r3, [pc, #172]	; (8003e30 <RCCEx_PLL3_Config+0x15c>)
 8003d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d84:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	699b      	ldr	r3, [r3, #24]
 8003d8c:	4928      	ldr	r1, [pc, #160]	; (8003e30 <RCCEx_PLL3_Config+0x15c>)
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003d92:	4b27      	ldr	r3, [pc, #156]	; (8003e30 <RCCEx_PLL3_Config+0x15c>)
 8003d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d96:	4a26      	ldr	r2, [pc, #152]	; (8003e30 <RCCEx_PLL3_Config+0x15c>)
 8003d98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d9c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003d9e:	4b24      	ldr	r3, [pc, #144]	; (8003e30 <RCCEx_PLL3_Config+0x15c>)
 8003da0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003da2:	4b24      	ldr	r3, [pc, #144]	; (8003e34 <RCCEx_PLL3_Config+0x160>)
 8003da4:	4013      	ands	r3, r2
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	69d2      	ldr	r2, [r2, #28]
 8003daa:	00d2      	lsls	r2, r2, #3
 8003dac:	4920      	ldr	r1, [pc, #128]	; (8003e30 <RCCEx_PLL3_Config+0x15c>)
 8003dae:	4313      	orrs	r3, r2
 8003db0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003db2:	4b1f      	ldr	r3, [pc, #124]	; (8003e30 <RCCEx_PLL3_Config+0x15c>)
 8003db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db6:	4a1e      	ldr	r2, [pc, #120]	; (8003e30 <RCCEx_PLL3_Config+0x15c>)
 8003db8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dbc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d106      	bne.n	8003dd2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003dc4:	4b1a      	ldr	r3, [pc, #104]	; (8003e30 <RCCEx_PLL3_Config+0x15c>)
 8003dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc8:	4a19      	ldr	r2, [pc, #100]	; (8003e30 <RCCEx_PLL3_Config+0x15c>)
 8003dca:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003dce:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003dd0:	e00f      	b.n	8003df2 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d106      	bne.n	8003de6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003dd8:	4b15      	ldr	r3, [pc, #84]	; (8003e30 <RCCEx_PLL3_Config+0x15c>)
 8003dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ddc:	4a14      	ldr	r2, [pc, #80]	; (8003e30 <RCCEx_PLL3_Config+0x15c>)
 8003dde:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003de2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003de4:	e005      	b.n	8003df2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003de6:	4b12      	ldr	r3, [pc, #72]	; (8003e30 <RCCEx_PLL3_Config+0x15c>)
 8003de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dea:	4a11      	ldr	r2, [pc, #68]	; (8003e30 <RCCEx_PLL3_Config+0x15c>)
 8003dec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003df0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003df2:	4b0f      	ldr	r3, [pc, #60]	; (8003e30 <RCCEx_PLL3_Config+0x15c>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a0e      	ldr	r2, [pc, #56]	; (8003e30 <RCCEx_PLL3_Config+0x15c>)
 8003df8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dfc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003dfe:	f7fc ff3d 	bl	8000c7c <HAL_GetTick>
 8003e02:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003e04:	e008      	b.n	8003e18 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003e06:	f7fc ff39 	bl	8000c7c <HAL_GetTick>
 8003e0a:	4602      	mov	r2, r0
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	1ad3      	subs	r3, r2, r3
 8003e10:	2b02      	cmp	r3, #2
 8003e12:	d901      	bls.n	8003e18 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003e14:	2303      	movs	r3, #3
 8003e16:	e006      	b.n	8003e26 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003e18:	4b05      	ldr	r3, [pc, #20]	; (8003e30 <RCCEx_PLL3_Config+0x15c>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d0f0      	beq.n	8003e06 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003e24:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3710      	adds	r7, #16
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
 8003e2e:	bf00      	nop
 8003e30:	58024400 	.word	0x58024400
 8003e34:	ffff0007 	.word	0xffff0007

08003e38 <__libc_init_array>:
 8003e38:	b570      	push	{r4, r5, r6, lr}
 8003e3a:	4d0d      	ldr	r5, [pc, #52]	; (8003e70 <__libc_init_array+0x38>)
 8003e3c:	4c0d      	ldr	r4, [pc, #52]	; (8003e74 <__libc_init_array+0x3c>)
 8003e3e:	1b64      	subs	r4, r4, r5
 8003e40:	10a4      	asrs	r4, r4, #2
 8003e42:	2600      	movs	r6, #0
 8003e44:	42a6      	cmp	r6, r4
 8003e46:	d109      	bne.n	8003e5c <__libc_init_array+0x24>
 8003e48:	4d0b      	ldr	r5, [pc, #44]	; (8003e78 <__libc_init_array+0x40>)
 8003e4a:	4c0c      	ldr	r4, [pc, #48]	; (8003e7c <__libc_init_array+0x44>)
 8003e4c:	f000 f82e 	bl	8003eac <_init>
 8003e50:	1b64      	subs	r4, r4, r5
 8003e52:	10a4      	asrs	r4, r4, #2
 8003e54:	2600      	movs	r6, #0
 8003e56:	42a6      	cmp	r6, r4
 8003e58:	d105      	bne.n	8003e66 <__libc_init_array+0x2e>
 8003e5a:	bd70      	pop	{r4, r5, r6, pc}
 8003e5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e60:	4798      	blx	r3
 8003e62:	3601      	adds	r6, #1
 8003e64:	e7ee      	b.n	8003e44 <__libc_init_array+0xc>
 8003e66:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e6a:	4798      	blx	r3
 8003e6c:	3601      	adds	r6, #1
 8003e6e:	e7f2      	b.n	8003e56 <__libc_init_array+0x1e>
 8003e70:	08003f30 	.word	0x08003f30
 8003e74:	08003f30 	.word	0x08003f30
 8003e78:	08003f30 	.word	0x08003f30
 8003e7c:	08003f34 	.word	0x08003f34

08003e80 <memcpy>:
 8003e80:	440a      	add	r2, r1
 8003e82:	4291      	cmp	r1, r2
 8003e84:	f100 33ff 	add.w	r3, r0, #4294967295
 8003e88:	d100      	bne.n	8003e8c <memcpy+0xc>
 8003e8a:	4770      	bx	lr
 8003e8c:	b510      	push	{r4, lr}
 8003e8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003e92:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003e96:	4291      	cmp	r1, r2
 8003e98:	d1f9      	bne.n	8003e8e <memcpy+0xe>
 8003e9a:	bd10      	pop	{r4, pc}

08003e9c <memset>:
 8003e9c:	4402      	add	r2, r0
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d100      	bne.n	8003ea6 <memset+0xa>
 8003ea4:	4770      	bx	lr
 8003ea6:	f803 1b01 	strb.w	r1, [r3], #1
 8003eaa:	e7f9      	b.n	8003ea0 <memset+0x4>

08003eac <_init>:
 8003eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eae:	bf00      	nop
 8003eb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003eb2:	bc08      	pop	{r3}
 8003eb4:	469e      	mov	lr, r3
 8003eb6:	4770      	bx	lr

08003eb8 <_fini>:
 8003eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eba:	bf00      	nop
 8003ebc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ebe:	bc08      	pop	{r3}
 8003ec0:	469e      	mov	lr, r3
 8003ec2:	4770      	bx	lr
